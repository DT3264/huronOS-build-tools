var search_data = {"index":{"searchIndex":["dsl","object","ripper","filter","add_event()","check_arity()","column()","column()","const_missing()","debug_output()","debug_output=()","dedent_string()","encoding()","end_seen?()","error?()","filename()","filename()","generate_eventids1()","generate_eventids2_table()","grammar()","lex()","lex_state_name()","lineno()","lineno()","main()","method_missing()","new()","new()","new()","new_var()","opt_event()","parse()","parse()","parse()","prelude()","read_ids1()","read_ids1_with_locations()","read_ids2()","sexp()","sexp_raw()","slice()","state()","state()","strip_locations()","token()","tokenize()","usage()","usercode()","yydebug()","yydebug=()"],"longSearchIndex":["dsl","object","ripper","ripper::filter","object#add_event()","object#check_arity()","ripper#column()","ripper::filter#column()","object::const_missing()","ripper#debug_output()","ripper#debug_output=()","ripper::dedent_string()","ripper#encoding()","ripper#end_seen?()","ripper#error?()","ripper#filename()","ripper::filter#filename()","object#generate_eventids1()","object#generate_eventids2_table()","object#grammar()","ripper::lex()","ripper::lex_state_name()","ripper#lineno()","ripper::filter#lineno()","object#main()","object#method_missing()","dsl::new()","ripper::new()","ripper::filter::new()","object#new_var()","object#opt_event()","ripper::parse()","ripper#parse()","ripper::filter#parse()","object#prelude()","object#read_ids1()","object#read_ids1_with_locations()","object#read_ids2()","ripper::sexp()","ripper::sexp_raw()","ripper::slice()","ripper#state()","ripper::filter#state()","object#strip_locations()","ripper#token()","ripper::tokenize()","object#usage()","object#usercode()","ripper#yydebug()","ripper#yydebug=()"],"info":[["DSL","","DSL.html","","<p>Simple DSL implementation for Ripper code generation\n<p>input: /*% ripper: stmts_add(stmts_new, void_stmt …\n"],["Object","","Object.html","",""],["Ripper","","Ripper.html","","<p>Ripper is a Ruby script parser.\n<p>You can get information from the parser with event-based style. Information …\n"],["Ripper::Filter","","Ripper/Filter.html","","<p>This class handles only scanner events, which are dispatched in the &#39;right&#39; order (same with …\n"],["add_event","Object","Object.html#method-i-add_event","(event, args, qundef_check = false)",""],["check_arity","Object","Object.html#method-i-check_arity","(h)",""],["column","Ripper","Ripper.html#method-i-column","()","<p>Return column number of current parsing line. This number starts from 0.\n"],["column","Ripper::Filter","Ripper/Filter.html#method-i-column","()","<p>The column number of the current token. This value starts from 0. This method is valid only in event …\n"],["const_missing","Object","Object.html#method-c-const_missing","(name)",""],["debug_output","Ripper","Ripper.html#method-i-debug_output","()","<p>Get debug output.\n"],["debug_output=","Ripper","Ripper.html#method-i-debug_output-3D","(p1)","<p>Set debug output.\n"],["dedent_string","Ripper","Ripper.html#method-c-dedent_string","(p1, p2)","<p>USE OF RIPPER LIBRARY ONLY.\n<p>Strips up to <code>width</code> leading whitespaces from <code>input</code>, and returns the stripped …\n"],["encoding","Ripper","Ripper.html#method-i-encoding","()","<p>Return encoding of the source.\n"],["end_seen?","Ripper","Ripper.html#method-i-end_seen-3F","()","<p>Return true if parsed source ended by +_<em>END</em>_+.\n"],["error?","Ripper","Ripper.html#method-i-error-3F","()","<p>Return true if parsed source has errors.\n"],["filename","Ripper","Ripper.html#method-i-filename","()","<p>Return current parsing filename.\n"],["filename","Ripper::Filter","Ripper/Filter.html#method-i-filename","()","<p>The file name of the input.\n"],["generate_eventids1","Object","Object.html#method-i-generate_eventids1","(ids)",""],["generate_eventids2_table","Object","Object.html#method-i-generate_eventids2_table","(ids)",""],["grammar","Object","Object.html#method-i-grammar","(f, out)",""],["lex","Ripper","Ripper.html#method-c-lex","(src, filename = '-', lineno = 1)","<p>Tokenizes the Ruby program and returns an array of an array, which is formatted like <code>[[lineno, column],</code> …\n"],["lex_state_name","Ripper","Ripper.html#method-c-lex_state_name","(p1)","<p>Returns a string representation of lex_state.\n"],["lineno","Ripper","Ripper.html#method-i-lineno","()","<p>Return line number of current parsing line. This number starts from 1.\n"],["lineno","Ripper::Filter","Ripper/Filter.html#method-i-lineno","()","<p>The line number of the current token. This value starts from 1. This method is valid only in event handlers. …\n"],["main","Object","Object.html#method-i-main","()",""],["method_missing","Object","Object.html#method-i-method_missing","(event, *args)",""],["new","DSL","DSL.html#method-c-new","(code, options)",""],["new","Ripper","Ripper.html#method-c-new","(p1, p2 = v2, p3 = v3)","<p>Create a new Ripper object. <em>src</em> must be a String, an IO, or an Object which has #gets method.\n<p>This method …\n"],["new","Ripper::Filter","Ripper/Filter.html#method-c-new","(src, filename = '-', lineno = 1)","<p>Creates a new Ripper::Filter instance, passes parameters <code>src</code>, <code>filename</code>, and <code>lineno</code> to Ripper::Lexer.new …\n"],["new_var","Object","Object.html#method-i-new_var","()",""],["opt_event","Object","Object.html#method-i-opt_event","(event, default, addend)",""],["parse","Ripper","Ripper.html#method-c-parse","(src, filename = '(ripper)', lineno = 1)","<p>Parses the given Ruby program read from <code>src</code>. <code>src</code> must be a String or an IO or a object with a #gets method. …\n"],["parse","Ripper","Ripper.html#method-i-parse","()","<p>Start parsing and returns the value of the root action.\n"],["parse","Ripper::Filter","Ripper/Filter.html#method-i-parse","(init = nil)","<p>Starts the parser. <code>init</code> is a data accumulator and is passed to the next event handler (as of Enumerable#inject …\n"],["prelude","Object","Object.html#method-i-prelude","(f, out)",""],["read_ids1","Object","Object.html#method-i-read_ids1","(path)",""],["read_ids1_with_locations","Object","Object.html#method-i-read_ids1_with_locations","(path)",""],["read_ids2","Object","Object.html#method-i-read_ids2","(path)",""],["sexp","Ripper","Ripper.html#method-c-sexp","(src, filename = '-', lineno = 1)","<p>EXPERIMENTAL &mdash; Parses <code>src</code> and create S-exp tree. Returns more readable tree rather than Ripper.sexp_raw …\n"],["sexp_raw","Ripper","Ripper.html#method-c-sexp_raw","(src, filename = '-', lineno = 1)","<p>EXPERIMENTAL &mdash; Parses <code>src</code> and create S-exp tree. This method is mainly for developer use.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">&#39;ripper&#39;</span> <span class=\"ruby-operator\">...</span>\n</pre>\n\n"],["slice","Ripper","Ripper.html#method-c-slice","(src, pattern, n = 0)","<p>EXPERIMENTAL &mdash; Parses <code>src</code> and return a string which was matched to <code>pattern</code>. <code>pattern</code> should be described …\n"],["state","Ripper","Ripper.html#method-i-state","()","<p>Return scanner state of current token.\n"],["state","Ripper::Filter","Ripper/Filter.html#method-i-state","()","<p>The scanner&#39;s state of the current token. This value is the bitwise OR of zero or more of the <code>Ripper::EXPR_*</code> …\n"],["strip_locations","Object","Object.html#method-i-strip_locations","(h)",""],["token","Ripper","Ripper.html#method-i-token","()","<p>Return the current token string.\n"],["tokenize","Ripper","Ripper.html#method-c-tokenize","(src, filename = '-', lineno = 1)","<p>Tokenizes the Ruby program and returns an array of strings.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">p</span> <span class=\"ruby-constant\">Ripper</span>.<span class=\"ruby-identifier\">tokenize</span>(<span class=\"ruby-string\">&quot;def m(a) nil end&quot;</span>)\n   <span class=\"ruby-comment\"># ...</span>\n</pre>\n"],["usage","Object","Object.html#method-i-usage","(msg)",""],["usercode","Object","Object.html#method-i-usercode","(f, out)",""],["yydebug","Ripper","Ripper.html#method-i-yydebug","()","<p>Get yydebug.\n"],["yydebug=","Ripper","Ripper.html#method-i-yydebug-3D","(p1)","<p>Set yydebug.\n"]]}}