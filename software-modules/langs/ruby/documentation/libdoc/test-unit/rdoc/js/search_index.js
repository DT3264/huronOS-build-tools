var search_data = {"index":{"searchIndex":["object","test","unit","assertionfailederror","assertions","assertexceptionhelper","wrappedexception","assertionmessage","arrayinspector","delayedliteral","hashinspector","inspector","literal","maybecontainer","numericinspector","template","throwtagextractor","attribute","baseclassmethods","classmethods","stringifykeyhash","attributematcher","autorunner","stoponfailurelistener","autorunnerloader","codesnippetfetcher","collector","descendant","dir","load","objectspace","xml","listener","color","error","parseerror","colorscheme","data","classmethods","loader","datasets","diff","differ","readablediffer","sequencematcher","utf8line","unifieddiffer","error","errorhandler","exceptionhandler","classmethods","failure","failurehandler","faultlocationdetector","fixture","classmethods","fixture","hookpoint","mixcolor","notification","notificationhandler","notifiederror","nullresultcontainerinitializer","omission","omissionhandler","omittederror","pendederror","pending","pendinghandler","priority","checker","classmethods","testcase","internaldata","testcasenotificationsupport","testcaseomissionsupport","testcasependingsupport","testresult","testresulterrorsupport","testresultfailuresupport","testresultnotificationsupport","testresultomissionsupport","testresultpendingsupport","testsuite","ui","console","colorizedreadablediffer","outputlevel","testrunner","emacs","testrunner","testrunner","testrunnermediator","testrunnerutilities","xml","testrunner","util","backtracefilter","methodownerfinder","observable","output","procwrapper","+()","+()","<<()","<<()","<=>()","==()","==()","==()","==()","==()","==()","[]()","[]()","[]()","[]()","[]()","[]()","[]=()","[]=()","[]=()","add()","add_assertion()","add_assertion()","add_error()","add_failure()","add_failure()","add_listener()","add_notification()","add_omission()","add_pass()","add_pass()","add_pending()","add_run()","add_suite()","add_test_cases()","after_append_callbacks()","after_callbacks()","after_prepend_callbacks()","all()","assert()","assert_alias_method()","assert_block()","assert_boolean()","assert_compare()","assert_const_defined()","assert_empty()","assert_equal()","assert_fail_assertion()","assert_false()","assert_in_delta()","assert_in_epsilon()","assert_include()","assert_includes()","assert_instance_of()","assert_kind_of()","assert_match()","assert_nil()","assert_no_match()","assert_not_const_defined()","assert_not_empty()","assert_not_equal()","assert_not_in_delta()","assert_not_in_epsilon()","assert_not_include()","assert_not_includes()","assert_not_instance_of()","assert_not_kind_of()","assert_not_match()","assert_not_nil()","assert_not_operator()","assert_not_predicate()","assert_not_respond_to()","assert_not_same()","assert_not_send()","assert_nothing_raised()","assert_nothing_thrown()","assert_operator()","assert_path_exist()","assert_path_not_exist()","assert_predicate()","assert_raise()","assert_raise_kind_of()","assert_raise_message()","assert_raises()","assert_respond_to()","assert_same()","assert_send()","assert_throw()","assert_throws()","assert_true()","assign_test_data()","at_exit()","at_start()","attach_to_mediator()","attribute()","attribute_observers()","attributes()","attributes()","attributes_table()","attributes_table()","available_colors()","available_priorities()","available_values()","background?()","backtrace()","base=()","before_append_callbacks()","before_callbacks()","before_prepend_callbacks()","blocks()","bold?()","build_message()","cached_new()","capture_output()","check()","cleanup()","cleanup()","collect()","collect()","collect()","collect()","collect()","collect_file()","collector()","compute_width()","convert()","convert()","create()","critical?()","critical?()","critical?()","critical?()","critical?()","current_attribute()","current_attributes()","data()","data()","data_label()","default()","default()","default=()","default_for_256_colors()","default_for_8_colors()","default_runner()","default_runner=()","default_test()","default_test_paths=()","delayed_diff()","delayed_literal()","delete()","delete_tests()","description()","description()","diff()","diff()","diff()","diff()","diff_target_string?()","disable()","each()","each()","each()","each()","each_pair()","elapsed_time()","empty?()","enable()","enabled?()","ensure_diffable_string()","eql?()","eql?()","error_count()","error_occurred?()","escape_sequence()","escape_sequence()","exception_handler()","exception_handlers()","exception_handlers()","expected?()","expected_exceptions()","extract_tag()","failure_count()","failure_occurred?()","fetch()","filter=()","filter_backtrace()","find()","find_attribute()","find_locations()","find_test_cases()","find_test_cases()","fixture()","flunk()","fold()","folded_readable()","foreground?()","grouped_operations()","hash()","hash()","have_priority?()","have_test_data?()","include?()","included()","included()","included()","included()","included()","included()","included()","included()","included()","included()","included()","included()","included()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspector_classes()","intensity?()","interrupted()","interrupted?()","interrupted?()","italic?()","keep()","key?()","keyword_display()","label()","label()","label()","label()","label()","literal()","load()","load_config()","load_csv()","load_data()","load_tsv()","local_name()","location()","long_display()","long_display()","long_display()","long_display()","long_display()","longest_match()","match?()","max_diff_target_string_size()","max_diff_target_string_size=()","maybe_container()","message()","method_added()","method_missing()","method_missing()","name()","native_inspect()","need_auto_run=()","need_auto_run?()","need_diff?()","need_fold?()","need_to_run?()","need_to_run?()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","notification_count()","notify()","notify_listeners()","omission_count()","omit()","omit_if()","omit_unless()","operations()","options()","parse_256_color()","pass_percentage()","passed?()","passed?()","passed?()","passed?()","pend()","pending_count()","prepare()","prepare()","prepare_for_diff()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print_cycle()","pretty_print_cycle()","pretty_print_cycle()","pretty_print_cycle()","priority()","priority_setup()","priority_teardown()","problem_occurred()","problem_occurred()","process_args()","ratio()","readable()","realdir()","recursive_collect()","refute()","refute_empty()","refute_equal()","refute_in_delta()","refute_in_epsilon()","refute_includes()","refute_instance_of()","refute_kind_of()","refute_match()","refute_nil()","refute_operator()","refute_predicate()","refute_respond_to()","refute_same()","register()","register_attribute_observer()","register_collector()","register_color_scheme()","register_inspector_class()","register_runner()","remove_listener()","result()","run()","run()","run()","run()","run()","run()","run=()","run?()","run_at_exit_hooks()","run_at_start_hooks()","run_priority_high?()","run_priority_important?()","run_priority_low?()","run_priority_must?()","run_priority_never?()","run_priority_normal?()","run_suite()","run_test()","runner()","sequence()","sequence()","set_attributes()","setup()","setup()","setup()","setup_option()","short_display()","short_display()","short_display()","short_display()","short_display()","shutdown()","single_character_display()","single_character_display()","single_character_display()","single_character_display()","single_character_display()","size()","size()","size()","sort()","source()","split_backtrace_entry()","standalone?()","start()","start_command_line_test()","start_time()","startup()","status()","stop()","stop_on_failure?()","stringify()","sub_test_case()","suite()","summary()","tag_end()","tag_start()","target?()","target?()","target?()","target?()","teardown()","teardown()","teardown()","template()","test()","test_defined?()","test_finished()","test_order()","test_order=()","test_started()","text()","to_hash()","to_proc()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","underline?()","unified()","unregister()","unregister_cleanup()","unregister_exception_handler()","unregister_inspector_class()","unregister_setup()","unregister_teardown()","use_pp=()","user_message()","wide_character?()"],"longSearchIndex":["object","test","test::unit","test::unit::assertionfailederror","test::unit::assertions","test::unit::assertions::assertexceptionhelper","test::unit::assertions::assertexceptionhelper::wrappedexception","test::unit::assertions::assertionmessage","test::unit::assertions::assertionmessage::arrayinspector","test::unit::assertions::assertionmessage::delayedliteral","test::unit::assertions::assertionmessage::hashinspector","test::unit::assertions::assertionmessage::inspector","test::unit::assertions::assertionmessage::literal","test::unit::assertions::assertionmessage::maybecontainer","test::unit::assertions::assertionmessage::numericinspector","test::unit::assertions::assertionmessage::template","test::unit::assertions::throwtagextractor","test::unit::attribute","test::unit::attribute::baseclassmethods","test::unit::attribute::classmethods","test::unit::attribute::stringifykeyhash","test::unit::attributematcher","test::unit::autorunner","test::unit::autorunner::stoponfailurelistener","test::unit::autorunnerloader","test::unit::codesnippetfetcher","test::unit::collector","test::unit::collector::descendant","test::unit::collector::dir","test::unit::collector::load","test::unit::collector::objectspace","test::unit::collector::xml","test::unit::collector::xml::listener","test::unit::color","test::unit::color::error","test::unit::color::parseerror","test::unit::colorscheme","test::unit::data","test::unit::data::classmethods","test::unit::data::classmethods::loader","test::unit::datasets","test::unit::diff","test::unit::diff::differ","test::unit::diff::readablediffer","test::unit::diff::sequencematcher","test::unit::diff::utf8line","test::unit::diff::unifieddiffer","test::unit::error","test::unit::errorhandler","test::unit::exceptionhandler","test::unit::exceptionhandler::classmethods","test::unit::failure","test::unit::failurehandler","test::unit::faultlocationdetector","test::unit::fixture","test::unit::fixture::classmethods","test::unit::fixture::fixture","test::unit::fixture::hookpoint","test::unit::mixcolor","test::unit::notification","test::unit::notificationhandler","test::unit::notifiederror","test::unit::nullresultcontainerinitializer","test::unit::omission","test::unit::omissionhandler","test::unit::omittederror","test::unit::pendederror","test::unit::pending","test::unit::pendinghandler","test::unit::priority","test::unit::priority::checker","test::unit::priority::classmethods","test::unit::testcase","test::unit::testcase::internaldata","test::unit::testcasenotificationsupport","test::unit::testcaseomissionsupport","test::unit::testcasependingsupport","test::unit::testresult","test::unit::testresulterrorsupport","test::unit::testresultfailuresupport","test::unit::testresultnotificationsupport","test::unit::testresultomissionsupport","test::unit::testresultpendingsupport","test::unit::testsuite","test::unit::ui","test::unit::ui::console","test::unit::ui::console::colorizedreadablediffer","test::unit::ui::console::outputlevel","test::unit::ui::console::testrunner","test::unit::ui::emacs","test::unit::ui::emacs::testrunner","test::unit::ui::testrunner","test::unit::ui::testrunnermediator","test::unit::ui::testrunnerutilities","test::unit::ui::xml","test::unit::ui::xml::testrunner","test::unit::util","test::unit::util::backtracefilter","test::unit::util::methodownerfinder","test::unit::util::observable","test::unit::util::output","test::unit::util::procwrapper","test::unit::color#+()","test::unit::mixcolor#+()","test::unit::datasets#<<()","test::unit::testsuite#<<()","test::unit::assertions::assertionmessage::inspector#<=>()","test::unit::color#==()","test::unit::datasets#==()","test::unit::mixcolor#==()","test::unit::testcase#==()","test::unit::testsuite#==()","test::unit::util::procwrapper#==()","test::unit::attribute#[]()","test::unit::attribute::stringifykeyhash#[]()","test::unit::colorscheme::[]()","test::unit::colorscheme#[]()","test::unit::diff::utf8line#[]()","test::unit::fixture::fixture#[]()","test::unit::attribute::stringifykeyhash#[]=()","test::unit::colorscheme::[]=()","test::unit::colorscheme#[]=()","test::unit::datasets#add()","test::unit::assertions#add_assertion()","test::unit::testresult#add_assertion()","test::unit::testresulterrorsupport#add_error()","test::unit::failurehandler#add_failure()","test::unit::testresultfailuresupport#add_failure()","test::unit::util::observable#add_listener()","test::unit::testresultnotificationsupport#add_notification()","test::unit::testresultomissionsupport#add_omission()","test::unit::testcase#add_pass()","test::unit::testresult#add_pass()","test::unit::testresultpendingsupport#add_pending()","test::unit::testresult#add_run()","test::unit::collector#add_suite()","test::unit::collector#add_test_cases()","test::unit::fixture::hookpoint#after_append_callbacks()","test::unit::fixture::fixture#after_callbacks()","test::unit::fixture::hookpoint#after_prepend_callbacks()","test::unit::colorscheme::all()","test::unit::assertions#assert()","test::unit::assertions#assert_alias_method()","test::unit::assertions#assert_block()","test::unit::assertions#assert_boolean()","test::unit::assertions#assert_compare()","test::unit::assertions#assert_const_defined()","test::unit::assertions#assert_empty()","test::unit::assertions#assert_equal()","test::unit::assertions#assert_fail_assertion()","test::unit::assertions#assert_false()","test::unit::assertions#assert_in_delta()","test::unit::assertions#assert_in_epsilon()","test::unit::assertions#assert_include()","test::unit::assertions#assert_includes()","test::unit::assertions#assert_instance_of()","test::unit::assertions#assert_kind_of()","test::unit::assertions#assert_match()","test::unit::assertions#assert_nil()","test::unit::assertions#assert_no_match()","test::unit::assertions#assert_not_const_defined()","test::unit::assertions#assert_not_empty()","test::unit::assertions#assert_not_equal()","test::unit::assertions#assert_not_in_delta()","test::unit::assertions#assert_not_in_epsilon()","test::unit::assertions#assert_not_include()","test::unit::assertions#assert_not_includes()","test::unit::assertions#assert_not_instance_of()","test::unit::assertions#assert_not_kind_of()","test::unit::assertions#assert_not_match()","test::unit::assertions#assert_not_nil()","test::unit::assertions#assert_not_operator()","test::unit::assertions#assert_not_predicate()","test::unit::assertions#assert_not_respond_to()","test::unit::assertions#assert_not_same()","test::unit::assertions#assert_not_send()","test::unit::assertions#assert_nothing_raised()","test::unit::assertions#assert_nothing_thrown()","test::unit::assertions#assert_operator()","test::unit::assertions#assert_path_exist()","test::unit::assertions#assert_path_not_exist()","test::unit::assertions#assert_predicate()","test::unit::assertions#assert_raise()","test::unit::assertions#assert_raise_kind_of()","test::unit::assertions#assert_raise_message()","test::unit::assertions#assert_raises()","test::unit::assertions#assert_respond_to()","test::unit::assertions#assert_same()","test::unit::assertions#assert_send()","test::unit::assertions#assert_throw()","test::unit::assertions#assert_throws()","test::unit::assertions#assert_true()","test::unit::testcase::internaldata#assign_test_data()","test::unit::at_exit()","test::unit::at_start()","test::unit::autorunner::stoponfailurelistener#attach_to_mediator()","test::unit::attribute::classmethods#attribute()","test::unit::attribute::classmethods#attribute_observers()","test::unit::attribute#attributes()","test::unit::attribute::classmethods#attributes()","test::unit::attribute::baseclassmethods#attributes_table()","test::unit::attribute::classmethods#attributes_table()","test::unit::colorscheme::available_colors()","test::unit::priority::checker::available_priorities()","test::unit::priority::available_values()","test::unit::color#background?()","test::unit::error#backtrace()","test::unit::collector::load#base=()","test::unit::fixture::hookpoint#before_append_callbacks()","test::unit::fixture::fixture#before_callbacks()","test::unit::fixture::hookpoint#before_prepend_callbacks()","test::unit::diff::sequencematcher#blocks()","test::unit::color#bold?()","test::unit::assertions#build_message()","test::unit::assertions::assertionmessage::inspector::cached_new()","test::unit::util::output#capture_output()","test::unit::autorunnerloader::check()","test::unit::fixture::classmethods#cleanup()","test::unit::testcase#cleanup()","test::unit::collector::descendant#collect()","test::unit::collector::dir#collect()","test::unit::collector::load#collect()","test::unit::collector::objectspace#collect()","test::unit::collector::xml#collect()","test::unit::collector::dir#collect_file()","test::unit::autorunner::collector()","test::unit::diff::utf8line#compute_width()","test::unit::assertions::assertionmessage::convert()","test::unit::assertions::assertionmessage#convert()","test::unit::assertions::assertionmessage::template::create()","test::unit::error#critical?()","test::unit::failure#critical?()","test::unit::notification#critical?()","test::unit::omission#critical?()","test::unit::pending#critical?()","test::unit::attribute::classmethods#current_attribute()","test::unit::attribute::classmethods#current_attributes()","test::unit::data::classmethods#data()","test::unit::testcase#data()","test::unit::testcase#data_label()","test::unit::colorscheme::default()","test::unit::priority::default()","test::unit::priority::default=()","test::unit::colorscheme::default_for_256_colors()","test::unit::colorscheme::default_for_8_colors()","test::unit::autorunner::default_runner()","test::unit::autorunner::default_runner=()","test::unit::testcase#default_test()","test::unit::collector::load#default_test_paths=()","test::unit::assertions::assertionmessage::delayed_diff()","test::unit::assertions::assertionmessage::delayed_literal()","test::unit::testsuite#delete()","test::unit::testsuite#delete_tests()","test::unit::testcase::description()","test::unit::testcase#description()","test::unit::diff#diff()","test::unit::diff::readablediffer#diff()","test::unit::diff::unifieddiffer#diff()","test::unit::failure#diff()","test::unit::assertions::assertionmessage::diff_target_string?()","test::unit::priority::disable()","test::unit::assertions::assertionmessage::arrayinspector#each()","test::unit::colorscheme#each()","test::unit::datasets#each()","test::unit::diff::utf8line#each()","test::unit::assertions::assertionmessage::hashinspector#each_pair()","test::unit::testcase#elapsed_time()","test::unit::testsuite#empty?()","test::unit::priority::enable()","test::unit::priority::enabled?()","test::unit::assertions::assertionmessage::ensure_diffable_string()","test::unit::datasets#eql?()","test::unit::util::procwrapper#eql?()","test::unit::testresulterrorsupport#error_count()","test::unit::testresulterrorsupport#error_occurred?()","test::unit::color#escape_sequence()","test::unit::mixcolor#escape_sequence()","test::unit::exceptionhandler::classmethods#exception_handler()","test::unit::exceptionhandler::exception_handlers()","test::unit::exceptionhandler::classmethods#exception_handlers()","test::unit::assertions::assertexceptionhelper#expected?()","test::unit::assertions::assertexceptionhelper#expected_exceptions()","test::unit::assertions::throwtagextractor#extract_tag()","test::unit::testresultfailuresupport#failure_count()","test::unit::testresultfailuresupport#failure_occurred?()","test::unit::codesnippetfetcher#fetch()","test::unit::collector#filter=()","test::unit::util::backtracefilter#filter_backtrace()","test::unit::util::methodownerfinder#find()","test::unit::attribute::classmethods#find_attribute()","test::unit::testcase::find_locations()","test::unit::collector::dir#find_test_cases()","test::unit::collector::load#find_test_cases()","test::unit::fixture::classmethods#fixture()","test::unit::assertions#flunk()","test::unit::diff#fold()","test::unit::diff#folded_readable()","test::unit::color#foreground?()","test::unit::diff::sequencematcher#grouped_operations()","test::unit::datasets#hash()","test::unit::util::procwrapper#hash()","test::unit::priority::checker::have_priority?()","test::unit::testcase::internaldata#have_test_data?()","test::unit::collector#include?()","test::unit::attribute::included()","test::unit::data::included()","test::unit::errorhandler::included()","test::unit::exceptionhandler::included()","test::unit::failurehandler::included()","test::unit::fixture::included()","test::unit::notificationhandler::included()","test::unit::omissionhandler::included()","test::unit::pendinghandler::included()","test::unit::priority::included()","test::unit::testcasenotificationsupport::included()","test::unit::testcaseomissionsupport::included()","test::unit::testcasependingsupport::included()","test::unit::assertions::assertexceptionhelper::wrappedexception#inspect()","test::unit::assertions::assertionmessage::arrayinspector#inspect()","test::unit::assertions::assertionmessage::delayedliteral#inspect()","test::unit::assertions::assertionmessage::hashinspector#inspect()","test::unit::assertions::assertionmessage::inspector#inspect()","test::unit::assertions::assertionmessage::literal#inspect()","test::unit::assertions::assertionmessage::maybecontainer#inspect()","test::unit::assertions::assertionmessage::numericinspector#inspect()","test::unit::assertions::assertionmessage::inspector::inspector_classes()","test::unit::color#intensity?()","test::unit::testcase::internaldata#interrupted()","test::unit::testcase#interrupted?()","test::unit::testcase::internaldata#interrupted?()","test::unit::color#italic?()","test::unit::datasets#keep()","test::unit::attribute::stringifykeyhash#key?()","test::unit::autorunner#keyword_display()","test::unit::error#label()","test::unit::failure#label()","test::unit::notification#label()","test::unit::omission#label()","test::unit::pending#label()","test::unit::assertions::assertionmessage::literal()","test::unit::data::classmethods::loader#load()","test::unit::autorunner#load_config()","test::unit::data::classmethods::loader#load_csv()","test::unit::data::classmethods#load_data()","test::unit::data::classmethods::loader#load_tsv()","test::unit::testcase#local_name()","test::unit::error#location()","test::unit::error#long_display()","test::unit::failure#long_display()","test::unit::notification#long_display()","test::unit::omission#long_display()","test::unit::pending#long_display()","test::unit::diff::sequencematcher#longest_match()","test::unit::attributematcher#match?()","test::unit::assertions::assertionmessage::max_diff_target_string_size()","test::unit::assertions::assertionmessage::max_diff_target_string_size=()","test::unit::assertions::assertionmessage::maybe_container()","test::unit::error#message()","test::unit::attribute::classmethods#method_added()","test::unit::assertions::assertexceptionhelper::wrappedexception#method_missing()","test::unit::attributematcher#method_missing()","test::unit::testcase#name()","test::unit::assertions::assertionmessage::inspector#native_inspect()","test::unit::autorunner::need_auto_run=()","test::unit::autorunner::need_auto_run?()","test::unit::ui::console::colorizedreadablediffer#need_diff?()","test::unit::diff#need_fold?()","test::unit::priority::checker::need_to_run?()","test::unit::priority::checker#need_to_run?()","test::unit::assertionfailederror::new()","test::unit::assertions::assertexceptionhelper::new()","test::unit::assertions::assertexceptionhelper::wrappedexception::new()","test::unit::assertions::assertionmessage::new()","test::unit::assertions::assertionmessage::arrayinspector::new()","test::unit::assertions::assertionmessage::delayedliteral::new()","test::unit::assertions::assertionmessage::hashinspector::new()","test::unit::assertions::assertionmessage::inspector::new()","test::unit::assertions::assertionmessage::literal::new()","test::unit::assertions::assertionmessage::maybecontainer::new()","test::unit::assertions::assertionmessage::numericinspector::new()","test::unit::assertions::assertionmessage::template::new()","test::unit::assertions::throwtagextractor::new()","test::unit::attributematcher::new()","test::unit::autorunner::new()","test::unit::codesnippetfetcher::new()","test::unit::collector::new()","test::unit::collector::dir::new()","test::unit::collector::load::new()","test::unit::collector::objectspace::new()","test::unit::collector::xml::listener::new()","test::unit::color::new()","test::unit::colorscheme::new()","test::unit::data::classmethods::loader::new()","test::unit::datasets::new()","test::unit::diff::differ::new()","test::unit::diff::sequencematcher::new()","test::unit::diff::utf8line::new()","test::unit::error::new()","test::unit::failure::new()","test::unit::faultlocationdetector::new()","test::unit::fixture::fixture::new()","test::unit::fixture::hookpoint::new()","test::unit::mixcolor::new()","test::unit::notification::new()","test::unit::omission::new()","test::unit::pending::new()","test::unit::priority::checker::new()","test::unit::testcase::new()","test::unit::testcase::internaldata::new()","test::unit::testresult::new()","test::unit::testsuite::new()","test::unit::ui::console::colorizedreadablediffer::new()","test::unit::ui::console::testrunner::new()","test::unit::ui::testrunner::new()","test::unit::ui::testrunnermediator::new()","test::unit::ui::xml::testrunner::new()","test::unit::util::procwrapper::new()","test::unit::testresultnotificationsupport#notification_count()","test::unit::testcasenotificationsupport#notify()","test::unit::util::observable#notify_listeners()","test::unit::testresultomissionsupport#omission_count()","test::unit::testcaseomissionsupport#omit()","test::unit::testcaseomissionsupport#omit_if()","test::unit::testcaseomissionsupport#omit_unless()","test::unit::diff::sequencematcher#operations()","test::unit::autorunner#options()","test::unit::color::parse_256_color()","test::unit::testresult#pass_percentage()","test::unit::testcase#passed?()","test::unit::testcase::internaldata#passed?()","test::unit::testresult#passed?()","test::unit::testsuite#passed?()","test::unit::testcasependingsupport#pend()","test::unit::testresultpendingsupport#pending_count()","test::unit::autorunner::prepare()","test::unit::autorunner#prepare()","test::unit::assertions::assertionmessage::prepare_for_diff()","test::unit::assertions::assertionmessage::arrayinspector#pretty_print()","test::unit::assertions::assertionmessage::hashinspector#pretty_print()","test::unit::assertions::assertionmessage::inspector#pretty_print()","test::unit::assertions::assertionmessage::numericinspector#pretty_print()","test::unit::assertions::assertionmessage::arrayinspector#pretty_print_cycle()","test::unit::assertions::assertionmessage::hashinspector#pretty_print_cycle()","test::unit::assertions::assertionmessage::inspector#pretty_print_cycle()","test::unit::assertions::assertionmessage::numericinspector#pretty_print_cycle()","test::unit::priority::classmethods#priority()","test::unit::priority#priority_setup()","test::unit::priority#priority_teardown()","test::unit::testcase#problem_occurred()","test::unit::testcase::internaldata#problem_occurred()","test::unit::autorunner#process_args()","test::unit::diff::sequencematcher#ratio()","test::unit::diff#readable()","test::unit::collector::dir#realdir()","test::unit::collector::dir#recursive_collect()","test::unit::assertions#refute()","test::unit::assertions#refute_empty()","test::unit::assertions#refute_equal()","test::unit::assertions#refute_in_delta()","test::unit::assertions#refute_in_epsilon()","test::unit::assertions#refute_includes()","test::unit::assertions#refute_instance_of()","test::unit::assertions#refute_kind_of()","test::unit::assertions#refute_match()","test::unit::assertions#refute_nil()","test::unit::assertions#refute_operator()","test::unit::assertions#refute_predicate()","test::unit::assertions#refute_respond_to()","test::unit::assertions#refute_same()","test::unit::fixture::hookpoint#register()","test::unit::attribute::classmethods#register_attribute_observer()","test::unit::autorunner::register_collector()","test::unit::autorunner::register_color_scheme()","test::unit::assertions::assertionmessage::inspector::register_inspector_class()","test::unit::autorunner::register_runner()","test::unit::util::observable#remove_listener()","test::unit::assertions::assertionmessage::template#result()","test::unit::autorunner::run()","test::unit::autorunner#run()","test::unit::testcase#run()","test::unit::testsuite#run()","test::unit::ui::testrunnermediator#run()","test::unit::ui::testrunnerutilities#run()","test::unit::run=()","test::unit::run?()","test::unit::run_at_exit_hooks()","test::unit::run_at_start_hooks()","test::unit::priority::checker::run_priority_high?()","test::unit::priority::checker::run_priority_important?()","test::unit::priority::checker::run_priority_low?()","test::unit::priority::checker::run_priority_must?()","test::unit::priority::checker::run_priority_never?()","test::unit::priority::checker::run_priority_normal?()","test::unit::ui::testrunnermediator#run_suite()","object#run_test()","test::unit::autorunner::runner()","test::unit::color#sequence()","test::unit::mixcolor#sequence()","test::unit::attribute::classmethods#set_attributes()","test::unit::fixture::classmethods#setup()","test::unit::priority::checker#setup()","test::unit::testcase#setup()","test::unit::autorunner::setup_option()","test::unit::error#short_display()","test::unit::failure#short_display()","test::unit::notification#short_display()","test::unit::omission#short_display()","test::unit::pending#short_display()","test::unit::testcase::shutdown()","test::unit::error#single_character_display()","test::unit::failure#single_character_display()","test::unit::notification#single_character_display()","test::unit::omission#single_character_display()","test::unit::pending#single_character_display()","test::unit::diff::utf8line#size()","test::unit::testcase#size()","test::unit::testsuite#size()","test::unit::collector#sort()","test::unit::codesnippetfetcher#source()","test::unit::faultlocationdetector#split_backtrace_entry()","test::unit::autorunner::standalone?()","test::unit::ui::testrunner#start()","test::unit::ui::testrunnerutilities#start_command_line_test()","test::unit::testcase#start_time()","test::unit::testcase::startup()","test::unit::testresult#status()","test::unit::testresult#stop()","test::unit::autorunner#stop_on_failure?()","test::unit::attribute::stringifykeyhash::stringify()","test::unit::testcase::sub_test_case()","test::unit::testcase::suite()","test::unit::testresult#summary()","test::unit::collector::xml::listener#tag_end()","test::unit::collector::xml::listener#tag_start()","test::unit::assertions::assertionmessage::arrayinspector::target?()","test::unit::assertions::assertionmessage::hashinspector::target?()","test::unit::assertions::assertionmessage::numericinspector::target?()","test::unit::faultlocationdetector#target?()","test::unit::fixture::classmethods#teardown()","test::unit::priority::checker#teardown()","test::unit::testcase#teardown()","test::unit::assertions::assertionmessage#template()","test::unit::testcase::test()","test::unit::testcase::test_defined?()","test::unit::testcase::internaldata#test_finished()","test::unit::testcase::test_order()","test::unit::testcase::test_order=()","test::unit::testcase::internaldata#test_started()","test::unit::collector::xml::listener#text()","test::unit::colorscheme#to_hash()","test::unit::util::procwrapper#to_proc()","test::unit::assertions::assertionmessage#to_s()","test::unit::diff::utf8line#to_s()","test::unit::error#to_s()","test::unit::failure#to_s()","test::unit::notification#to_s()","test::unit::omission#to_s()","test::unit::pending#to_s()","test::unit::testcase#to_s()","test::unit::testresult#to_s()","test::unit::testsuite#to_s()","test::unit::color#underline?()","test::unit::diff#unified()","test::unit::fixture::hookpoint#unregister()","test::unit::fixture::classmethods#unregister_cleanup()","test::unit::exceptionhandler::classmethods#unregister_exception_handler()","test::unit::assertions::assertionmessage::inspector::unregister_inspector_class()","test::unit::fixture::classmethods#unregister_setup()","test::unit::fixture::classmethods#unregister_teardown()","test::unit::assertions::use_pp=()","test::unit::assertions::assertionmessage#user_message()","test::unit::diff::utf8line::wide_character?()"],"info":[["Object","","Object.html","",""],["Test","","Test.html","","<p>Copyright (C) 2012-2015  Kouhei Sutou &lt;kou@clear-code.com&gt;\n<p>License: Ruby&#39;s or LGPLv2.1 or later …\n"],["Test::Unit","","Test/Unit.html","","<p># Test::Unit - Ruby Unit Testing Framework\n<p>## Introduction\n<p>Unit testing is making waves all over the place, …\n"],["Test::Unit::AssertionFailedError","","Test/Unit/AssertionFailedError.html","","<p>Thrown by Test::Unit::Assertions when an assertion fails.\n"],["Test::Unit::Assertions","","Test/Unit/Assertions.html","","<p>Test::Unit::Assertions contains the standard Test::Unit assertions. Assertions is included in Test::Unit::TestCase …\n"],["Test::Unit::Assertions::AssertExceptionHelper","","Test/Unit/Assertions/AssertExceptionHelper.html","",""],["Test::Unit::Assertions::AssertExceptionHelper::WrappedException","","Test/Unit/Assertions/AssertExceptionHelper/WrappedException.html","",""],["Test::Unit::Assertions::AssertionMessage","","Test/Unit/Assertions/AssertionMessage.html","",""],["Test::Unit::Assertions::AssertionMessage::ArrayInspector","","Test/Unit/Assertions/AssertionMessage/ArrayInspector.html","",""],["Test::Unit::Assertions::AssertionMessage::DelayedLiteral","","Test/Unit/Assertions/AssertionMessage/DelayedLiteral.html","",""],["Test::Unit::Assertions::AssertionMessage::HashInspector","","Test/Unit/Assertions/AssertionMessage/HashInspector.html","",""],["Test::Unit::Assertions::AssertionMessage::Inspector","","Test/Unit/Assertions/AssertionMessage/Inspector.html","",""],["Test::Unit::Assertions::AssertionMessage::Literal","","Test/Unit/Assertions/AssertionMessage/Literal.html","",""],["Test::Unit::Assertions::AssertionMessage::MaybeContainer","","Test/Unit/Assertions/AssertionMessage/MaybeContainer.html","",""],["Test::Unit::Assertions::AssertionMessage::NumericInspector","","Test/Unit/Assertions/AssertionMessage/NumericInspector.html","",""],["Test::Unit::Assertions::AssertionMessage::Template","","Test/Unit/Assertions/AssertionMessage/Template.html","",""],["Test::Unit::Assertions::ThrowTagExtractor","","Test/Unit/Assertions/ThrowTagExtractor.html","","<p>@private\n"],["Test::Unit::Attribute","","Test/Unit/Attribute.html","",""],["Test::Unit::Attribute::BaseClassMethods","","Test/Unit/Attribute/BaseClassMethods.html","",""],["Test::Unit::Attribute::ClassMethods","","Test/Unit/Attribute/ClassMethods.html","",""],["Test::Unit::Attribute::StringifyKeyHash","","Test/Unit/Attribute/StringifyKeyHash.html","",""],["Test::Unit::AttributeMatcher","","Test/Unit/AttributeMatcher.html","",""],["Test::Unit::AutoRunner","","Test/Unit/AutoRunner.html","",""],["Test::Unit::AutoRunner::StopOnFailureListener","","Test/Unit/AutoRunner/StopOnFailureListener.html","",""],["Test::Unit::AutoRunnerLoader","","Test/Unit/AutoRunnerLoader.html","",""],["Test::Unit::CodeSnippetFetcher","","Test/Unit/CodeSnippetFetcher.html","",""],["Test::Unit::Collector","","Test/Unit/Collector.html","",""],["Test::Unit::Collector::Descendant","","Test/Unit/Collector/Descendant.html","",""],["Test::Unit::Collector::Dir","","Test/Unit/Collector/Dir.html","",""],["Test::Unit::Collector::Load","","Test/Unit/Collector/Load.html","",""],["Test::Unit::Collector::ObjectSpace","","Test/Unit/Collector/ObjectSpace.html","",""],["Test::Unit::Collector::XML","","Test/Unit/Collector/XML.html","",""],["Test::Unit::Collector::XML::Listener","","Test/Unit/Collector/XML/Listener.html","",""],["Test::Unit::Color","","Test/Unit/Color.html","",""],["Test::Unit::Color::Error","","Test/Unit/Color/Error.html","",""],["Test::Unit::Color::ParseError","","Test/Unit/Color/ParseError.html","",""],["Test::Unit::ColorScheme","","Test/Unit/ColorScheme.html","",""],["Test::Unit::Data","","Test/Unit/Data.html","",""],["Test::Unit::Data::ClassMethods","","Test/Unit/Data/ClassMethods.html","",""],["Test::Unit::Data::ClassMethods::Loader","","Test/Unit/Data/ClassMethods/Loader.html","",""],["Test::Unit::DataSets","","Test/Unit/DataSets.html","",""],["Test::Unit::Diff","","Test/Unit/Diff.html","",""],["Test::Unit::Diff::Differ","","Test/Unit/Diff/Differ.html","",""],["Test::Unit::Diff::ReadableDiffer","","Test/Unit/Diff/ReadableDiffer.html","",""],["Test::Unit::Diff::SequenceMatcher","","Test/Unit/Diff/SequenceMatcher.html","",""],["Test::Unit::Diff::UTF8Line","","Test/Unit/Diff/UTF8Line.html","",""],["Test::Unit::Diff::UnifiedDiffer","","Test/Unit/Diff/UnifiedDiffer.html","",""],["Test::Unit::Error","","Test/Unit/Error.html","","<p>Encapsulates an error in a test. Created by Test::Unit::TestCase when it rescues an exception thrown …\n"],["Test::Unit::ErrorHandler","","Test/Unit/ErrorHandler.html","",""],["Test::Unit::ExceptionHandler","","Test/Unit/ExceptionHandler.html","",""],["Test::Unit::ExceptionHandler::ClassMethods","","Test/Unit/ExceptionHandler/ClassMethods.html","",""],["Test::Unit::Failure","","Test/Unit/Failure.html","","<p>Encapsulates a test failure. Created by Test::Unit::TestCase when an assertion fails.\n"],["Test::Unit::FailureHandler","","Test/Unit/FailureHandler.html","",""],["Test::Unit::FaultLocationDetector","","Test/Unit/FaultLocationDetector.html","",""],["Test::Unit::Fixture","","Test/Unit/Fixture.html","",""],["Test::Unit::Fixture::ClassMethods","","Test/Unit/Fixture/ClassMethods.html","",""],["Test::Unit::Fixture::Fixture","","Test/Unit/Fixture/Fixture.html","",""],["Test::Unit::Fixture::HookPoint","","Test/Unit/Fixture/HookPoint.html","",""],["Test::Unit::MixColor","","Test/Unit/MixColor.html","",""],["Test::Unit::Notification","","Test/Unit/Notification.html","",""],["Test::Unit::NotificationHandler","","Test/Unit/NotificationHandler.html","",""],["Test::Unit::NotifiedError","","Test/Unit/NotifiedError.html","",""],["Test::Unit::NullResultContainerInitializer","","Test/Unit/NullResultContainerInitializer.html","",""],["Test::Unit::Omission","","Test/Unit/Omission.html","",""],["Test::Unit::OmissionHandler","","Test/Unit/OmissionHandler.html","",""],["Test::Unit::OmittedError","","Test/Unit/OmittedError.html","",""],["Test::Unit::PendedError","","Test/Unit/PendedError.html","",""],["Test::Unit::Pending","","Test/Unit/Pending.html","",""],["Test::Unit::PendingHandler","","Test/Unit/PendingHandler.html","",""],["Test::Unit::Priority","","Test/Unit/Priority.html","",""],["Test::Unit::Priority::Checker","","Test/Unit/Priority/Checker.html","",""],["Test::Unit::Priority::ClassMethods","","Test/Unit/Priority/ClassMethods.html","",""],["Test::Unit::TestCase","","Test/Unit/TestCase.html","","<p>Ties everything together. If you subclass and add your own test methods, it takes care of making them …\n"],["Test::Unit::TestCase::InternalData","","Test/Unit/TestCase/InternalData.html","",""],["Test::Unit::TestCaseNotificationSupport","","Test/Unit/TestCaseNotificationSupport.html","",""],["Test::Unit::TestCaseOmissionSupport","","Test/Unit/TestCaseOmissionSupport.html","",""],["Test::Unit::TestCasePendingSupport","","Test/Unit/TestCasePendingSupport.html","",""],["Test::Unit::TestResult","","Test/Unit/TestResult.html","","<p>Collects Test::Unit::Failure and Test::Unit::Error so that they can be displayed to the user. To this …\n"],["Test::Unit::TestResultErrorSupport","","Test/Unit/TestResultErrorSupport.html","",""],["Test::Unit::TestResultFailureSupport","","Test/Unit/TestResultFailureSupport.html","",""],["Test::Unit::TestResultNotificationSupport","","Test/Unit/TestResultNotificationSupport.html","",""],["Test::Unit::TestResultOmissionSupport","","Test/Unit/TestResultOmissionSupport.html","",""],["Test::Unit::TestResultPendingSupport","","Test/Unit/TestResultPendingSupport.html","",""],["Test::Unit::TestSuite","","Test/Unit/TestSuite.html","","<p>A collection of tests which can be #run.\n<p>Note: It is easy to confuse a TestSuite instance with something …\n"],["Test::Unit::UI","","Test/Unit/UI.html","",""],["Test::Unit::UI::Console","","Test/Unit/UI/Console.html","",""],["Test::Unit::UI::Console::ColorizedReadableDiffer","","Test/Unit/UI/Console/ColorizedReadableDiffer.html","",""],["Test::Unit::UI::Console::OutputLevel","","Test/Unit/UI/Console/OutputLevel.html","",""],["Test::Unit::UI::Console::TestRunner","","Test/Unit/UI/Console/TestRunner.html","","<p>Runs a Test::Unit::TestSuite on the console.\n"],["Test::Unit::UI::Emacs","","Test/Unit/UI/Emacs.html","",""],["Test::Unit::UI::Emacs::TestRunner","","Test/Unit/UI/Emacs/TestRunner.html","",""],["Test::Unit::UI::TestRunner","","Test/Unit/UI/TestRunner.html","",""],["Test::Unit::UI::TestRunnerMediator","","Test/Unit/UI/TestRunnerMediator.html","","<p>Provides an interface to write any given UI against, hopefully making it easy to write new UIs.\n"],["Test::Unit::UI::TestRunnerUtilities","","Test/Unit/UI/TestRunnerUtilities.html","","<p>Provides some utilities common to most, if not all, TestRunners.\n"],["Test::Unit::UI::XML","","Test/Unit/UI/XML.html","",""],["Test::Unit::UI::XML::TestRunner","","Test/Unit/UI/XML/TestRunner.html","","<p>Runs a Test::Unit::TestSuite and outputs XML.\n"],["Test::Unit::Util","","Test/Unit/Util.html","",""],["Test::Unit::Util::BacktraceFilter","","Test/Unit/Util/BacktraceFilter.html","",""],["Test::Unit::Util::MethodOwnerFinder","","Test/Unit/Util/MethodOwnerFinder.html","",""],["Test::Unit::Util::Observable","","Test/Unit/Util/Observable.html","","<p>This is a utility class that allows anything mixing it in to notify a set of listeners about interesting …\n"],["Test::Unit::Util::Output","","Test/Unit/Util/Output.html","",""],["Test::Unit::Util::ProcWrapper","","Test/Unit/Util/ProcWrapper.html","","<p>Allows the storage of a Proc passed through &#39;&amp;&#39; in a hash.\n<p>Note: this may be inefficient, …\n"],["+","Test::Unit::Color","Test/Unit/Color.html#method-i-2B","(other)",""],["+","Test::Unit::MixColor","Test/Unit/MixColor.html#method-i-2B","(other)",""],["<<","Test::Unit::DataSets","Test/Unit/DataSets.html#method-i-3C-3C","(data_set)",""],["<<","Test::Unit::TestSuite","Test/Unit/TestSuite.html#method-i-3C-3C","(test)","<p>Adds the test to the suite.\n"],["<=>","Test::Unit::Assertions::AssertionMessage::Inspector","Test/Unit/Assertions/AssertionMessage/Inspector.html#method-i-3C-3D-3E","(other)",""],["==","Test::Unit::Color","Test/Unit/Color.html#method-i-3D-3D","(other)",""],["==","Test::Unit::DataSets","Test/Unit/DataSets.html#method-i-3D-3D","(other)",""],["==","Test::Unit::MixColor","Test/Unit/MixColor.html#method-i-3D-3D","(other)",""],["==","Test::Unit::TestCase","Test/Unit/TestCase.html#method-i-3D-3D","(other)","<p>It&#39;s handy to be able to compare TestCase instances.\n"],["==","Test::Unit::TestSuite","Test/Unit/TestSuite.html#method-i-3D-3D","(other)","<p>It&#39;s handy to be able to compare TestSuite instances.\n"],["==","Test::Unit::Util::ProcWrapper","Test/Unit/Util/ProcWrapper.html#method-i-3D-3D","(other)",""],["[]","Test::Unit::Attribute","Test/Unit/Attribute.html#method-i-5B-5D","(name)",""],["[]","Test::Unit::Attribute::StringifyKeyHash","Test/Unit/Attribute/StringifyKeyHash.html#method-i-5B-5D","(key)",""],["[]","Test::Unit::ColorScheme","Test/Unit/ColorScheme.html#method-c-5B-5D","(id)",""],["[]","Test::Unit::ColorScheme","Test/Unit/ColorScheme.html#method-i-5B-5D","(name)",""],["[]","Test::Unit::Diff::UTF8Line","Test/Unit/Diff/UTF8Line.html#method-i-5B-5D","(*args)",""],["[]","Test::Unit::Fixture::Fixture","Test/Unit/Fixture/Fixture.html#method-i-5B-5D","(type)",""],["[]=","Test::Unit::Attribute::StringifyKeyHash","Test/Unit/Attribute/StringifyKeyHash.html#method-i-5B-5D-3D","(key, value)",""],["[]=","Test::Unit::ColorScheme","Test/Unit/ColorScheme.html#method-c-5B-5D-3D","(id, scheme_or_spec)",""],["[]=","Test::Unit::ColorScheme","Test/Unit/ColorScheme.html#method-i-5B-5D-3D","(name, color_spec)",""],["add","Test::Unit::DataSets","Test/Unit/DataSets.html#method-i-add","(data_set, options=nil)",""],["add_assertion","Test::Unit::Assertions","Test/Unit/Assertions.html#method-i-add_assertion","()","<p>Called whenever an assertion is made. Define this in classes that include Test::Unit::Assertions to record …\n"],["add_assertion","Test::Unit::TestResult","Test/Unit/TestResult.html#method-i-add_assertion","()","<p>Records an individual assertion.\n"],["add_error","Test::Unit::TestResultErrorSupport","Test/Unit/TestResultErrorSupport.html#method-i-add_error","(error)","<p>Records a Test::Unit::Error.\n"],["add_failure","Test::Unit::FailureHandler","Test/Unit/FailureHandler.html#method-i-add_failure","(message, backtrace, options={})","<p>Report a failure.\n<p>This is a public API for developers who extend test-unit.\n<p>@param message [String] The …\n"],["add_failure","Test::Unit::TestResultFailureSupport","Test/Unit/TestResultFailureSupport.html#method-i-add_failure","(failure)","<p>Records a Test::Unit::Failure.\n"],["add_listener","Test::Unit::Util::Observable","Test/Unit/Util/Observable.html#method-i-add_listener","(channel_name, listener_key=NOTHING)","<p>Adds the passed proc as a listener on the channel indicated by channel_name. listener_key is used to …\n"],["add_notification","Test::Unit::TestResultNotificationSupport","Test/Unit/TestResultNotificationSupport.html#method-i-add_notification","(notification)","<p>Records a Test::Unit::Notification.\n"],["add_omission","Test::Unit::TestResultOmissionSupport","Test/Unit/TestResultOmissionSupport.html#method-i-add_omission","(omission)","<p>Records a Test::Unit::Omission.\n"],["add_pass","Test::Unit::TestCase","Test/Unit/TestCase.html#method-i-add_pass","()","<p>Notify that the test is passed. Normally, it is not needed because #run calls it automatically. If you …\n"],["add_pass","Test::Unit::TestResult","Test/Unit/TestResult.html#method-i-add_pass","()",""],["add_pending","Test::Unit::TestResultPendingSupport","Test/Unit/TestResultPendingSupport.html#method-i-add_pending","(pending)","<p>Records a Test::Unit::Pending.\n"],["add_run","Test::Unit::TestResult","Test/Unit/TestResult.html#method-i-add_run","()","<p>Records a test run.\n"],["add_suite","Test::Unit::Collector","Test/Unit/Collector.html#method-i-add_suite","(destination, suite)",""],["add_test_cases","Test::Unit::Collector","Test/Unit/Collector.html#method-i-add_test_cases","(suite, test_cases)",""],["after_append_callbacks","Test::Unit::Fixture::HookPoint","Test/Unit/Fixture/HookPoint.html#method-i-after_append_callbacks","()",""],["after_callbacks","Test::Unit::Fixture::Fixture","Test/Unit/Fixture/Fixture.html#method-i-after_callbacks","(type)",""],["after_prepend_callbacks","Test::Unit::Fixture::HookPoint","Test/Unit/Fixture/HookPoint.html#method-i-after_prepend_callbacks","()",""],["all","Test::Unit::ColorScheme","Test/Unit/ColorScheme.html#method-c-all","()",""],["assert","Test::Unit::Assertions","Test/Unit/Assertions.html#method-i-assert","(object=NOT_SPECIFIED, message=nil, &block)","<p>@overload assert(object, message=nil)\n\n<pre>Asserts that `object` is not false nor nil.\n\nNormally, you don&#39;t ...</pre>\n"],["assert_alias_method","Test::Unit::Assertions","Test/Unit/Assertions.html#method-i-assert_alias_method","(object, alias_name, original_name, message=nil)","<p>Passes if `object`#`alias_name` is an alias method of `object`#`original_name`.\n<p>@example\n\n<pre>assert_alias_method([], ...</pre>\n"],["assert_block","Test::Unit::Assertions","Test/Unit/Assertions.html#method-i-assert_block","(message=\"assert_block failed.\")","<p>The assertion upon which all other assertions are based. Passes if the block yields true.\n<p>@example\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">assert_block</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["assert_boolean","Test::Unit::Assertions","Test/Unit/Assertions.html#method-i-assert_boolean","(actual, message=nil)","<p>Passes if `actual` is a boolean value.\n<p>@example\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">assert_boolean</span>(<span class=\"ruby-keyword\">true</span>) <span class=\"ruby-comment\"># -&gt; pass</span>\n<span class=\"ruby-identifier\">assert_boolean</span>(<span class=\"ruby-keyword\">nil</span>)  <span class=\"ruby-comment\"># -&gt; ...</span>\n</pre>\n"],["assert_compare","Test::Unit::Assertions","Test/Unit/Assertions.html#method-i-assert_compare","(expected, operator, actual, message=nil)","<p>Passes if expression “`expected` `operator` `actual`” is true.\n<p>@example\n\n<pre>assert_compare(1, &quot;&lt;&quot;, ...</pre>\n"],["assert_const_defined","Test::Unit::Assertions","Test/Unit/Assertions.html#method-i-assert_const_defined","(object, constant_name, message=nil)","<p>Passes if `object`.const_defined?(`constant_name`)\n<p>@example\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">assert_const_defined</span>(<span class=\"ruby-constant\">Test</span>, <span class=\"ruby-value\">:Unit</span>)          <span class=\"ruby-operator\">...</span>\n</pre>\n"],["assert_empty","Test::Unit::Assertions","Test/Unit/Assertions.html#method-i-assert_empty","(object, message=nil)","<p>Passes if `object` is empty.\n<p>@example\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">assert_empty</span>(<span class=\"ruby-string\">&quot;&quot;</span>)                       <span class=\"ruby-comment\"># -&gt; pass</span>\n<span class=\"ruby-identifier\">assert_empty</span>([]) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["assert_equal","Test::Unit::Assertions","Test/Unit/Assertions.html#method-i-assert_equal","(expected, actual, message=nil)","<p>Passes if `expected` == `actual`.\n<p>Note that the ordering of arguments is important, since a helpful error …\n"],["assert_fail_assertion","Test::Unit::Assertions","Test/Unit/Assertions.html#method-i-assert_fail_assertion","(message=nil)","<p>Passes if assertion is failed in block.\n<p>@example\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">assert_fail_assertion</span> {<span class=\"ruby-identifier\">assert_equal</span>(<span class=\"ruby-string\">&quot;A&quot;</span>, <span class=\"ruby-string\">&quot;B&quot;</span>)}  <span class=\"ruby-comment\"># -&gt; pass ...</span>\n</pre>\n"],["assert_false","Test::Unit::Assertions","Test/Unit/Assertions.html#method-i-assert_false","(actual, message=nil)","<p>Passes if `actual` is false.\n<p>@example\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">assert_false</span>(<span class=\"ruby-keyword\">false</span>)  <span class=\"ruby-comment\"># -&gt; pass</span>\n<span class=\"ruby-identifier\">assert_false</span>(<span class=\"ruby-keyword\">nil</span>)    <span class=\"ruby-comment\"># -&gt; fail</span>\n</pre>\n"],["assert_in_delta","Test::Unit::Assertions","Test/Unit/Assertions.html#method-i-assert_in_delta","(expected_float, actual_float, delta=0.001, message=\"\")","<p>Passes if `expected_float` and `actual_float` are equal within `delta` tolerance.\n<p>@example\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">assert_in_delta</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["assert_in_epsilon","Test::Unit::Assertions","Test/Unit/Assertions.html#method-i-assert_in_epsilon","(expected_float, actual_float, epsilon=0.001, message=\"\")","<p>Passes if `expected_float` and `actual_float` are equal within `epsilon` relative error of `expected_float`. …\n"],["assert_include","Test::Unit::Assertions","Test/Unit/Assertions.html#method-i-assert_include","(collection, object, message=nil)","<p>Passes if `collection` includes `object`.\n<p>@example\n\n<pre>assert_include([1, 10], 1)            # -&gt; pass\nassert_include(1..10, ...</pre>\n"],["assert_includes","Test::Unit::Assertions","Test/Unit/Assertions.html#method-i-assert_includes","(collection, object, message=nil)","<p>Just for minitest compatibility. :&lt;\n<p>@since 2.5.3\n"],["assert_instance_of","Test::Unit::Assertions","Test/Unit/Assertions.html#method-i-assert_instance_of","(klass, object, message=nil)","<p>Passes if `object`.instance_of?(`klass`). When `klass` is an array of classes, it passes if any class …\n"],["assert_kind_of","Test::Unit::Assertions","Test/Unit/Assertions.html#method-i-assert_kind_of","(klass, object, message=nil)","<p>Passes if `object`.kind_of?(`klass`). When `klass` is an array of classes or modules, it passes if any …\n"],["assert_match","Test::Unit::Assertions","Test/Unit/Assertions.html#method-i-assert_match","(pattern, string, message=nil)","<p>Passes if `pattern` =~ `string`.\n<p>@example\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">assert_match</span>(<span class=\"ruby-regexp\">/\\d+/</span>, <span class=\"ruby-string\">&#39;five, 6, seven&#39;</span>)\n</pre>\n"],["assert_nil","Test::Unit::Assertions","Test/Unit/Assertions.html#method-i-assert_nil","(object, message=nil)","<p>Passes if `object` is nil.\n<p>@example\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">assert_nil</span> [<span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">2</span>].<span class=\"ruby-identifier\">uniq!</span>\n</pre>\n"],["assert_no_match","Test::Unit::Assertions","Test/Unit/Assertions.html#method-i-assert_no_match","(regexp, string, message=\"\")","<p>Deprecated. Use #assert_not_match instead.\n<p>Passes if `regexp` !~ `string`\n<p>@example\n"],["assert_not_const_defined","Test::Unit::Assertions","Test/Unit/Assertions.html#method-i-assert_not_const_defined","(object, constant_name, message=nil)","<p>Passes if !`object`.const_defined?(`constant_name`)\n<p>@example\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">assert_not_const_defined</span>(<span class=\"ruby-constant\">Object</span>, <span class=\"ruby-value\">:Nonexistent</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["assert_not_empty","Test::Unit::Assertions","Test/Unit/Assertions.html#method-i-assert_not_empty","(object, message=nil)","<p>Passes if `object` is not empty.\n<p>@example\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">assert_not_empty</span>(<span class=\"ruby-string\">&quot; &quot;</span>)                      <span class=\"ruby-comment\"># -&gt; pass</span>\n<span class=\"ruby-identifier\">assert_not_empty</span>([<span class=\"ruby-keyword\">nil</span>]) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["assert_not_equal","Test::Unit::Assertions","Test/Unit/Assertions.html#method-i-assert_not_equal","(expected, actual, message=nil)","<p>Passes if `expected` != `actual`\n<p>@example\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">assert_not_equal</span> <span class=\"ruby-string\">&#39;some string&#39;</span>, <span class=\"ruby-value\">5</span>\n</pre>\n"],["assert_not_in_delta","Test::Unit::Assertions","Test/Unit/Assertions.html#method-i-assert_not_in_delta","(expected_float, actual_float, delta=0.001, message=\"\")","<p>Passes if `expected_float` and `actual_float` are not equal within `delta` tolerance.\n<p>@example\n\n<pre>assert_not_in_delta(0.05, ...</pre>\n"],["assert_not_in_epsilon","Test::Unit::Assertions","Test/Unit/Assertions.html#method-i-assert_not_in_epsilon","(expected_float, actual_float, epsilon=0.001, message=\"\")","<p>Passes if `expected_float` and `actual_float` are not equal within `epsilon` relative error of `expected_float`. …\n"],["assert_not_include","Test::Unit::Assertions","Test/Unit/Assertions.html#method-i-assert_not_include","(collection, object, message=nil)","<p>Passes if `collection` doesn&#39;t include `object`.\n<p>@example\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">assert_not_include</span>([<span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">10</span>], <span class=\"ruby-value\">5</span>)           <span class=\"ruby-operator\">...</span>\n</pre>\n"],["assert_not_includes","Test::Unit::Assertions","Test/Unit/Assertions.html#method-i-assert_not_includes","(collection, object, message=nil)","<p>Just for minitest compatibility. :&lt;\n<p>@since 3.0.0\n"],["assert_not_instance_of","Test::Unit::Assertions","Test/Unit/Assertions.html#method-i-assert_not_instance_of","(klass, object, message=nil)","<p>Passes if `object`.instance_of?(`klass`) does not hold. When `klass` is an array of classes, it passes …\n"],["assert_not_kind_of","Test::Unit::Assertions","Test/Unit/Assertions.html#method-i-assert_not_kind_of","(klass, object, message=nil)","<p>Passes if `object`.kind_of?(`klass`) does not hold. When `klass` is an array of classes or modules, it …\n"],["assert_not_match","Test::Unit::Assertions","Test/Unit/Assertions.html#method-i-assert_not_match","(regexp, string, message=nil)","<p>Passes if `regexp` !~ `string`\n<p>@example\n\n<pre>assert_not_match(/two/, &#39;one 2 three&#39;)   # -&gt; pass\nassert_not_match(/three/, ...</pre>\n"],["assert_not_nil","Test::Unit::Assertions","Test/Unit/Assertions.html#method-i-assert_not_nil","(object, message=nil)","<p>Passes if ! `object` .nil?\n<p>@example\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">assert_not_nil</span> <span class=\"ruby-string\">&#39;1 two 3&#39;</span>.<span class=\"ruby-identifier\">sub!</span>(<span class=\"ruby-regexp\">/two/</span>, <span class=\"ruby-string\">&#39;2&#39;</span>)\n</pre>\n"],["assert_not_operator","Test::Unit::Assertions","Test/Unit/Assertions.html#method-i-assert_not_operator","(object1, operator, object2, message=nil)","<p>Compares the `object1` with `object2` using `operator`.\n<p>Passes if object1.__send__(operator, object2) …\n"],["assert_not_predicate","Test::Unit::Assertions","Test/Unit/Assertions.html#method-i-assert_not_predicate","(object, predicate, message=nil)","<p>Passes if `object`.`predicate` is not <em>true</em>.\n<p>@example\n\n<pre>assert_not_predicate([1], :empty?) # -&gt; pass\nassert_not_predicate([], ...</pre>\n"],["assert_not_respond_to","Test::Unit::Assertions","Test/Unit/Assertions.html#method-i-assert_not_respond_to","(object, method, message=nil)","<p>Passes if `object` does not .respond_to? `method`.\n<p>@example\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">assert_not_respond_to</span>(<span class=\"ruby-string\">&#39;bugbear&#39;</span>, <span class=\"ruby-value\">:nonexistence</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["assert_not_same","Test::Unit::Assertions","Test/Unit/Assertions.html#method-i-assert_not_same","(expected, actual, message=nil)","<p>Passes if ! `actual` .equal? `expected`\n<p>@example\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">assert_not_same</span> <span class=\"ruby-constant\">Object</span>.<span class=\"ruby-identifier\">new</span>, <span class=\"ruby-constant\">Object</span>.<span class=\"ruby-identifier\">new</span>\n</pre>\n"],["assert_not_send","Test::Unit::Assertions","Test/Unit/Assertions.html#method-i-assert_not_send","(send_array, message=nil)","<p>Passes if the method send doesn&#39;t return a true value.\n<p>`send_array` is composed of:\n<p>A receiver\n"],["assert_nothing_raised","Test::Unit::Assertions","Test/Unit/Assertions.html#method-i-assert_nothing_raised","(*args)","<p>Passes if block does not raise an exception.\n<p>@example\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">assert_nothing_raised</span> <span class=\"ruby-keyword\">do</span>\n  [<span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">2</span>].<span class=\"ruby-identifier\">uniq</span>\n<span class=\"ruby-keyword\">end</span>\n</pre>\n"],["assert_nothing_thrown","Test::Unit::Assertions","Test/Unit/Assertions.html#method-i-assert_nothing_thrown","(message=nil, &proc)","<p>Passes if block does not throw anything.\n<p>@example\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">assert_nothing_thrown</span> <span class=\"ruby-keyword\">do</span>\n  [<span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">2</span>].<span class=\"ruby-identifier\">uniq</span>\n<span class=\"ruby-keyword\">end</span>\n</pre>\n"],["assert_operator","Test::Unit::Assertions","Test/Unit/Assertions.html#method-i-assert_operator","(object1, operator, object2, message=nil)","<p>Compares the `object1` with `object2` using `operator`.\n<p>Passes if object1.__send__(operator, object2) …\n"],["assert_path_exist","Test::Unit::Assertions","Test/Unit/Assertions.html#method-i-assert_path_exist","(path, message=nil)","<p>Passes if `path` exists.\n<p>@example\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">assert_path_exist</span>(<span class=\"ruby-string\">&quot;/tmp&quot;</span>)          <span class=\"ruby-comment\"># -&gt; pass</span>\n<span class=\"ruby-identifier\">assert_path_exist</span>(<span class=\"ruby-string\">&quot;/bin/sh&quot;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["assert_path_not_exist","Test::Unit::Assertions","Test/Unit/Assertions.html#method-i-assert_path_not_exist","(path, message=nil)","<p>Passes if `path` doesn&#39;t exist.\n<p>@example\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">assert_path_not_exist</span>(<span class=\"ruby-string\">&quot;/nonexistent&quot;</span>)  <span class=\"ruby-comment\"># -&gt; pass</span>\n<span class=\"ruby-identifier\">assert_path_not_exist</span>(<span class=\"ruby-string\">&quot;/tmp&quot;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["assert_predicate","Test::Unit::Assertions","Test/Unit/Assertions.html#method-i-assert_predicate","(object, predicate, message=nil)","<p>Passes if `object`.`predicate` is <em>true</em>.\n<p>@example\n\n<pre>assert_predicate([], :empty?)  # -&gt; pass\nassert_predicate([1], ...</pre>\n"],["assert_raise","Test::Unit::Assertions","Test/Unit/Assertions.html#method-i-assert_raise","(*args, &block)","<p>Passes if the block raises one of the expected exceptions. When an expected exception is an Exception …\n"],["assert_raise_kind_of","Test::Unit::Assertions","Test/Unit/Assertions.html#method-i-assert_raise_kind_of","(*args, &block)","<p>Passes if the block raises one of the given exceptions or sub exceptions of the given exceptions.\n<p>@example …\n"],["assert_raise_message","Test::Unit::Assertions","Test/Unit/Assertions.html#method-i-assert_raise_message","(expected, message=nil)","<p>Passes if an exception is raised in block and its message is `expected`.\n<p>@example\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">assert_raise_message</span>(<span class=\"ruby-string\">&quot;exception&quot;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["assert_raises","Test::Unit::Assertions","Test/Unit/Assertions.html#method-i-assert_raises","(*args, &block)","<p>Just for minitest compatibility. :&lt;\n"],["assert_respond_to","Test::Unit::Assertions","Test/Unit/Assertions.html#method-i-assert_respond_to","(object, method, message=nil)","<p>Passes if `object` .respond_to? `method`\n<p>@example\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">assert_respond_to</span> <span class=\"ruby-string\">&#39;bugbear&#39;</span>, <span class=\"ruby-value\">:slice</span>\n</pre>\n"],["assert_same","Test::Unit::Assertions","Test/Unit/Assertions.html#method-i-assert_same","(expected, actual, message=nil)","<p>Passes if `actual` .equal? `expected` (i.e. they are the same instance).\n<p>@example\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">o</span> = <span class=\"ruby-constant\">Object</span>.<span class=\"ruby-identifier\">new</span>\n<span class=\"ruby-identifier\">assert_same</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["assert_send","Test::Unit::Assertions","Test/Unit/Assertions.html#method-i-assert_send","(send_array, message=nil)","<p>Passes if the method send returns a true value.\n<p>`send_array` is composed of:\n<p>A receiver\n"],["assert_throw","Test::Unit::Assertions","Test/Unit/Assertions.html#method-i-assert_throw","(expected_object, message=nil, &proc)","<p>Passes if the block throws `expected_object`\n<p>@example\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">assert_throw</span>(<span class=\"ruby-value\">:done</span>) <span class=\"ruby-keyword\">do</span>\n  <span class=\"ruby-identifier\">throw</span>(<span class=\"ruby-value\">:done</span>)\n<span class=\"ruby-keyword\">end</span>\n</pre>\n"],["assert_throws","Test::Unit::Assertions","Test/Unit/Assertions.html#method-i-assert_throws","(expected_object, message=nil, &proc)","<p>Just for minitest compatibility. :&lt;\n<p>@since 2.5.3\n"],["assert_true","Test::Unit::Assertions","Test/Unit/Assertions.html#method-i-assert_true","(actual, message=nil)","<p>Passes if `actual` is true.\n<p>@example\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">assert_true</span>(<span class=\"ruby-keyword\">true</span>)  <span class=\"ruby-comment\"># -&gt; pass</span>\n<span class=\"ruby-identifier\">assert_true</span>(<span class=\"ruby-value\">:true</span>) <span class=\"ruby-comment\"># -&gt; fail</span>\n</pre>\n"],["assign_test_data","Test::Unit::TestCase::InternalData","Test/Unit/TestCase/InternalData.html#method-i-assign_test_data","(label, data)",""],["at_exit","Test::Unit","Test/Unit.html#method-c-at_exit","(&hook)","<p>Regsiter a hook that is run after running tests. To register multiple hooks, call this method multiple …\n"],["at_start","Test::Unit","Test/Unit.html#method-c-at_start","(&hook)","<p>Regsiter a hook that is run before running tests. To register multiple hooks, call this method multiple …\n"],["attach_to_mediator","Test::Unit::AutoRunner::StopOnFailureListener","Test/Unit/AutoRunner/StopOnFailureListener.html#method-i-attach_to_mediator","(mediator)",""],["attribute","Test::Unit::Attribute::ClassMethods","Test/Unit/Attribute/ClassMethods.html#method-i-attribute","(name, value, options={}, *method_names)","<p>Set an attribute to test methods.\n<p>@overload attribute(name, value)\n\n<pre>@example\n  attribute :speed, :slow\n ...</pre>\n"],["attribute_observers","Test::Unit::Attribute::ClassMethods","Test/Unit/Attribute/ClassMethods.html#method-i-attribute_observers","(attribute_name)",""],["attributes","Test::Unit::Attribute","Test/Unit/Attribute.html#method-i-attributes","()",""],["attributes","Test::Unit::Attribute::ClassMethods","Test/Unit/Attribute/ClassMethods.html#method-i-attributes","(method_name)",""],["attributes_table","Test::Unit::Attribute::BaseClassMethods","Test/Unit/Attribute/BaseClassMethods.html#method-i-attributes_table","()",""],["attributes_table","Test::Unit::Attribute::ClassMethods","Test/Unit/Attribute/ClassMethods.html#method-i-attributes_table","()",""],["available_colors","Test::Unit::ColorScheme","Test/Unit/ColorScheme.html#method-c-available_colors","()",""],["available_priorities","Test::Unit::Priority::Checker","Test/Unit/Priority/Checker.html#method-c-available_priorities","()",""],["available_values","Test::Unit::Priority","Test/Unit/Priority.html#method-c-available_values","()",""],["background?","Test::Unit::Color","Test/Unit/Color.html#method-i-background-3F","()",""],["backtrace","Test::Unit::Error","Test/Unit/Error.html#method-i-backtrace","()",""],["base=","Test::Unit::Collector::Load","Test/Unit/Collector/Load.html#method-i-base-3D","(base)",""],["before_append_callbacks","Test::Unit::Fixture::HookPoint","Test/Unit/Fixture/HookPoint.html#method-i-before_append_callbacks","()",""],["before_callbacks","Test::Unit::Fixture::Fixture","Test/Unit/Fixture/Fixture.html#method-i-before_callbacks","(type)",""],["before_prepend_callbacks","Test::Unit::Fixture::HookPoint","Test/Unit/Fixture/HookPoint.html#method-i-before_prepend_callbacks","()",""],["blocks","Test::Unit::Diff::SequenceMatcher","Test/Unit/Diff/SequenceMatcher.html#method-i-blocks","()",""],["bold?","Test::Unit::Color","Test/Unit/Color.html#method-i-bold-3F","()",""],["build_message","Test::Unit::Assertions","Test/Unit/Assertions.html#method-i-build_message","(user_message, template=nil, *arguments)","<p>Builds a failure message.  `user_message` is added before the `template` and `arguments` replaces the …\n"],["cached_new","Test::Unit::Assertions::AssertionMessage::Inspector","Test/Unit/Assertions/AssertionMessage/Inspector.html#method-c-cached_new","(object, inspected_objects)",""],["capture_output","Test::Unit::Util::Output","Test/Unit/Util/Output.html#method-i-capture_output","()","<p>Returns output for standard output and standard error as string.\n<p>Example:\n\n<pre>capture_output do\n  puts(&quot;stdout&quot;) ...</pre>\n"],["check","Test::Unit::AutoRunnerLoader","Test/Unit/AutoRunnerLoader.html#method-c-check","(test_case, method_name)",""],["cleanup","Test::Unit::Fixture::ClassMethods","Test/Unit/Fixture/ClassMethods.html#method-i-cleanup","(*method_names, &callback)",""],["cleanup","Test::Unit::TestCase","Test/Unit/TestCase.html#method-i-cleanup","()","<p>Called after every test method runs but the test method isn&#39;t marked as &#39;passed&#39;. Can be …\n"],["collect","Test::Unit::Collector::Descendant","Test/Unit/Collector/Descendant.html#method-i-collect","(name=NAME)",""],["collect","Test::Unit::Collector::Dir","Test/Unit/Collector/Dir.html#method-i-collect","(*from)",""],["collect","Test::Unit::Collector::Load","Test/Unit/Collector/Load.html#method-i-collect","(*froms)",""],["collect","Test::Unit::Collector::ObjectSpace","Test/Unit/Collector/ObjectSpace.html#method-i-collect","(name=NAME)",""],["collect","Test::Unit::Collector::XML","Test/Unit/Collector/XML.html#method-i-collect","(xml_log_path)",""],["collect_file","Test::Unit::Collector::Dir","Test/Unit/Collector/Dir.html#method-i-collect_file","(name, suites, already_gathered)",""],["collector","Test::Unit::AutoRunner","Test/Unit/AutoRunner.html#method-c-collector","(id)",""],["compute_width","Test::Unit::Diff::UTF8Line","Test/Unit/Diff/UTF8Line.html#method-i-compute_width","(start, _end)",""],["convert","Test::Unit::Assertions::AssertionMessage","Test/Unit/Assertions/AssertionMessage.html#method-c-convert","(object)",""],["convert","Test::Unit::Assertions::AssertionMessage","Test/Unit/Assertions/AssertionMessage.html#method-i-convert","(object)",""],["create","Test::Unit::Assertions::AssertionMessage::Template","Test/Unit/Assertions/AssertionMessage/Template.html#method-c-create","(string)",""],["critical?","Test::Unit::Error","Test/Unit/Error.html#method-i-critical-3F","()",""],["critical?","Test::Unit::Failure","Test/Unit/Failure.html#method-i-critical-3F","()",""],["critical?","Test::Unit::Notification","Test/Unit/Notification.html#method-i-critical-3F","()",""],["critical?","Test::Unit::Omission","Test/Unit/Omission.html#method-i-critical-3F","()",""],["critical?","Test::Unit::Pending","Test/Unit/Pending.html#method-i-critical-3F","()",""],["current_attribute","Test::Unit::Attribute::ClassMethods","Test/Unit/Attribute/ClassMethods.html#method-i-current_attribute","(name)",""],["current_attributes","Test::Unit::Attribute::ClassMethods","Test/Unit/Attribute/ClassMethods.html#method-i-current_attributes","()",""],["data","Test::Unit::Data::ClassMethods","Test/Unit/Data/ClassMethods.html#method-i-data","(*arguments, &block)","<p>This method provides Data-Driven-Test functionality.\n<p>Define test data in the test code.\n<p>@overload data(label, …\n"],["data","Test::Unit::TestCase","Test/Unit/TestCase.html#method-i-data","()","<p>Returns test data for the test. If the test isn&#39;t associated with any test data, it returns `nil`. …\n"],["data_label","Test::Unit::TestCase","Test/Unit/TestCase.html#method-i-data_label","()","<p>Returns a label of test data for the test. If the test isn&#39;t associated with any test data, it returns …\n"],["default","Test::Unit::ColorScheme","Test/Unit/ColorScheme.html#method-c-default","()",""],["default","Test::Unit::Priority","Test/Unit/Priority.html#method-c-default","()",""],["default=","Test::Unit::Priority","Test/Unit/Priority.html#method-c-default-3D","(default)",""],["default_for_256_colors","Test::Unit::ColorScheme","Test/Unit/ColorScheme.html#method-c-default_for_256_colors","()",""],["default_for_8_colors","Test::Unit::ColorScheme","Test/Unit/ColorScheme.html#method-c-default_for_8_colors","()",""],["default_runner","Test::Unit::AutoRunner","Test/Unit/AutoRunner.html#method-c-default_runner","()",""],["default_runner=","Test::Unit::AutoRunner","Test/Unit/AutoRunner.html#method-c-default_runner-3D","(id)",""],["default_test","Test::Unit::TestCase","Test/Unit/TestCase.html#method-i-default_test","()",""],["default_test_paths=","Test::Unit::Collector::Load","Test/Unit/Collector/Load.html#method-i-default_test_paths-3D","(paths)",""],["delayed_diff","Test::Unit::Assertions::AssertionMessage","Test/Unit/Assertions/AssertionMessage.html#method-c-delayed_diff","(from, to)",""],["delayed_literal","Test::Unit::Assertions::AssertionMessage","Test/Unit/Assertions/AssertionMessage.html#method-c-delayed_literal","(&block)",""],["delete","Test::Unit::TestSuite","Test/Unit/TestSuite.html#method-i-delete","(test)",""],["delete_tests","Test::Unit::TestSuite","Test/Unit/TestSuite.html#method-i-delete_tests","(tests)",""],["description","Test::Unit::TestCase","Test/Unit/TestCase.html#method-c-description","(value, target=nil)","<p>Describes a test.\n<p>The following example associates “register a normal user” description with …\n"],["description","Test::Unit::TestCase","Test/Unit/TestCase.html#method-i-description","()","<p>Returns a description for the test. A description will be associated by Test::Unit::TestCase.test or …\n"],["diff","Test::Unit::Diff","Test/Unit/Diff.html#method-i-diff","(differ_class, from, to, options={})",""],["diff","Test::Unit::Diff::ReadableDiffer","Test/Unit/Diff/ReadableDiffer.html#method-i-diff","(options={})",""],["diff","Test::Unit::Diff::UnifiedDiffer","Test/Unit/Diff/UnifiedDiffer.html#method-i-diff","(options={})",""],["diff","Test::Unit::Failure","Test/Unit/Failure.html#method-i-diff","()",""],["diff_target_string?","Test::Unit::Assertions::AssertionMessage","Test/Unit/Assertions/AssertionMessage.html#method-c-diff_target_string-3F","(string)",""],["disable","Test::Unit::Priority","Test/Unit/Priority.html#method-c-disable","()",""],["each","Test::Unit::Assertions::AssertionMessage::ArrayInspector","Test/Unit/Assertions/AssertionMessage/ArrayInspector.html#method-i-each","(&block)",""],["each","Test::Unit::ColorScheme","Test/Unit/ColorScheme.html#method-i-each","(&block)",""],["each","Test::Unit::DataSets","Test/Unit/DataSets.html#method-i-each","()",""],["each","Test::Unit::Diff::UTF8Line","Test/Unit/Diff/UTF8Line.html#method-i-each","(&block)",""],["each_pair","Test::Unit::Assertions::AssertionMessage::HashInspector","Test/Unit/Assertions/AssertionMessage/HashInspector.html#method-i-each_pair","()",""],["elapsed_time","Test::Unit::TestCase","Test/Unit/TestCase.html#method-i-elapsed_time","()","<p>Returns elapsed time for the test was ran.\n"],["empty?","Test::Unit::TestSuite","Test/Unit/TestSuite.html#method-i-empty-3F","()",""],["enable","Test::Unit::Priority","Test/Unit/Priority.html#method-c-enable","()",""],["enabled?","Test::Unit::Priority","Test/Unit/Priority.html#method-c-enabled-3F","()",""],["ensure_diffable_string","Test::Unit::Assertions::AssertionMessage","Test/Unit/Assertions/AssertionMessage.html#method-c-ensure_diffable_string","(string)",""],["eql?","Test::Unit::DataSets","Test/Unit/DataSets.html#method-i-eql-3F","(other)",""],["eql?","Test::Unit::Util::ProcWrapper","Test/Unit/Util/ProcWrapper.html#method-i-eql-3F","(other)",""],["error_count","Test::Unit::TestResultErrorSupport","Test/Unit/TestResultErrorSupport.html#method-i-error_count","()","<p>Returns the number of errors this TestResult has recorded.\n"],["error_occurred?","Test::Unit::TestResultErrorSupport","Test/Unit/TestResultErrorSupport.html#method-i-error_occurred-3F","()",""],["escape_sequence","Test::Unit::Color","Test/Unit/Color.html#method-i-escape_sequence","()",""],["escape_sequence","Test::Unit::MixColor","Test/Unit/MixColor.html#method-i-escape_sequence","()",""],["exception_handler","Test::Unit::ExceptionHandler::ClassMethods","Test/Unit/ExceptionHandler/ClassMethods.html#method-i-exception_handler","(*method_name_or_handlers, &block)","<p>@overload exception_handler(method_name)\n\n<pre>Add an exception handler method.\n\n@param method_name [Symbol] ...</pre>\n"],["exception_handlers","Test::Unit::ExceptionHandler","Test/Unit/ExceptionHandler.html#method-c-exception_handlers","()",""],["exception_handlers","Test::Unit::ExceptionHandler::ClassMethods","Test/Unit/ExceptionHandler/ClassMethods.html#method-i-exception_handlers","()",""],["expected?","Test::Unit::Assertions::AssertExceptionHelper","Test/Unit/Assertions/AssertExceptionHelper.html#method-i-expected-3F","(actual_exception, equality=nil)",""],["expected_exceptions","Test::Unit::Assertions::AssertExceptionHelper","Test/Unit/Assertions/AssertExceptionHelper.html#method-i-expected_exceptions","()",""],["extract_tag","Test::Unit::Assertions::ThrowTagExtractor","Test/Unit/Assertions/ThrowTagExtractor.html#method-i-extract_tag","()",""],["failure_count","Test::Unit::TestResultFailureSupport","Test/Unit/TestResultFailureSupport.html#method-i-failure_count","()","<p>Returns the number of failures this TestResult has recorded.\n"],["failure_occurred?","Test::Unit::TestResultFailureSupport","Test/Unit/TestResultFailureSupport.html#method-i-failure_occurred-3F","()",""],["fetch","Test::Unit::CodeSnippetFetcher","Test/Unit/CodeSnippetFetcher.html#method-i-fetch","(path, line, options={})",""],["filter=","Test::Unit::Collector","Test/Unit/Collector.html#method-i-filter-3D","(filters)",""],["filter_backtrace","Test::Unit::Util::BacktraceFilter","Test/Unit/Util/BacktraceFilter.html#method-i-filter_backtrace","(backtrace, prefix=nil)",""],["find","Test::Unit::Util::MethodOwnerFinder","Test/Unit/Util/MethodOwnerFinder.html#method-i-find","(object, method_name)",""],["find_attribute","Test::Unit::Attribute::ClassMethods","Test/Unit/Attribute/ClassMethods.html#method-i-find_attribute","(method_name, name, options={})",""],["find_locations","Test::Unit::TestCase","Test/Unit/TestCase.html#method-c-find_locations","(query)",""],["find_test_cases","Test::Unit::Collector::Dir","Test/Unit/Collector/Dir.html#method-i-find_test_cases","(ignore=[])",""],["find_test_cases","Test::Unit::Collector::Load","Test/Unit/Collector/Load.html#method-i-find_test_cases","(ignore=[])",""],["fixture","Test::Unit::Fixture::ClassMethods","Test/Unit/Fixture/ClassMethods.html#method-i-fixture","()",""],["flunk","Test::Unit::Assertions","Test/Unit/Assertions.html#method-i-flunk","(message=\"Flunked\")","<p>Flunk always fails.\n<p>@example\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">flunk</span> <span class=\"ruby-string\">&#39;Not done testing yet.&#39;</span>\n</pre>\n"],["fold","Test::Unit::Diff","Test/Unit/Diff.html#method-i-fold","(string)",""],["folded_readable","Test::Unit::Diff","Test/Unit/Diff.html#method-i-folded_readable","(from, to, options={})",""],["foreground?","Test::Unit::Color","Test/Unit/Color.html#method-i-foreground-3F","()",""],["grouped_operations","Test::Unit::Diff::SequenceMatcher","Test/Unit/Diff/SequenceMatcher.html#method-i-grouped_operations","(context_size=nil)",""],["hash","Test::Unit::DataSets","Test/Unit/DataSets.html#method-i-hash","()",""],["hash","Test::Unit::Util::ProcWrapper","Test/Unit/Util/ProcWrapper.html#method-i-hash","()",""],["have_priority?","Test::Unit::Priority::Checker","Test/Unit/Priority/Checker.html#method-c-have_priority-3F","(name)",""],["have_test_data?","Test::Unit::TestCase::InternalData","Test/Unit/TestCase/InternalData.html#method-i-have_test_data-3F","()",""],["include?","Test::Unit::Collector","Test/Unit/Collector.html#method-i-include-3F","(test)",""],["included","Test::Unit::Attribute","Test/Unit/Attribute.html#method-c-included","(base)",""],["included","Test::Unit::Data","Test/Unit/Data.html#method-c-included","(base)",""],["included","Test::Unit::ErrorHandler","Test/Unit/ErrorHandler.html#method-c-included","(base)",""],["included","Test::Unit::ExceptionHandler","Test/Unit/ExceptionHandler.html#method-c-included","(base)",""],["included","Test::Unit::FailureHandler","Test/Unit/FailureHandler.html#method-c-included","(base)",""],["included","Test::Unit::Fixture","Test/Unit/Fixture.html#method-c-included","(base)",""],["included","Test::Unit::NotificationHandler","Test/Unit/NotificationHandler.html#method-c-included","(base)",""],["included","Test::Unit::OmissionHandler","Test/Unit/OmissionHandler.html#method-c-included","(base)",""],["included","Test::Unit::PendingHandler","Test/Unit/PendingHandler.html#method-c-included","(base)",""],["included","Test::Unit::Priority","Test/Unit/Priority.html#method-c-included","(base)",""],["included","Test::Unit::TestCaseNotificationSupport","Test/Unit/TestCaseNotificationSupport.html#method-c-included","(base)",""],["included","Test::Unit::TestCaseOmissionSupport","Test/Unit/TestCaseOmissionSupport.html#method-c-included","(base)",""],["included","Test::Unit::TestCasePendingSupport","Test/Unit/TestCasePendingSupport.html#method-c-included","(base)",""],["inspect","Test::Unit::Assertions::AssertExceptionHelper::WrappedException","Test/Unit/Assertions/AssertExceptionHelper/WrappedException.html#method-i-inspect","()",""],["inspect","Test::Unit::Assertions::AssertionMessage::ArrayInspector","Test/Unit/Assertions/AssertionMessage/ArrayInspector.html#method-i-inspect","()",""],["inspect","Test::Unit::Assertions::AssertionMessage::DelayedLiteral","Test/Unit/Assertions/AssertionMessage/DelayedLiteral.html#method-i-inspect","()",""],["inspect","Test::Unit::Assertions::AssertionMessage::HashInspector","Test/Unit/Assertions/AssertionMessage/HashInspector.html#method-i-inspect","()",""],["inspect","Test::Unit::Assertions::AssertionMessage::Inspector","Test/Unit/Assertions/AssertionMessage/Inspector.html#method-i-inspect","()",""],["inspect","Test::Unit::Assertions::AssertionMessage::Literal","Test/Unit/Assertions/AssertionMessage/Literal.html#method-i-inspect","()",""],["inspect","Test::Unit::Assertions::AssertionMessage::MaybeContainer","Test/Unit/Assertions/AssertionMessage/MaybeContainer.html#method-i-inspect","()",""],["inspect","Test::Unit::Assertions::AssertionMessage::NumericInspector","Test/Unit/Assertions/AssertionMessage/NumericInspector.html#method-i-inspect","()",""],["inspector_classes","Test::Unit::Assertions::AssertionMessage::Inspector","Test/Unit/Assertions/AssertionMessage/Inspector.html#method-c-inspector_classes","()",""],["intensity?","Test::Unit::Color","Test/Unit/Color.html#method-i-intensity-3F","()",""],["interrupted","Test::Unit::TestCase::InternalData","Test/Unit/TestCase/InternalData.html#method-i-interrupted","()",""],["interrupted?","Test::Unit::TestCase","Test/Unit/TestCase.html#method-i-interrupted-3F","()","<p>Returns whether the test is interrupted.\n"],["interrupted?","Test::Unit::TestCase::InternalData","Test/Unit/TestCase/InternalData.html#method-i-interrupted-3F","()",""],["italic?","Test::Unit::Color","Test/Unit/Color.html#method-i-italic-3F","()",""],["keep","Test::Unit::DataSets","Test/Unit/DataSets.html#method-i-keep","()",""],["key?","Test::Unit::Attribute::StringifyKeyHash","Test/Unit/Attribute/StringifyKeyHash.html#method-i-key-3F","(key)",""],["keyword_display","Test::Unit::AutoRunner","Test/Unit/AutoRunner.html#method-i-keyword_display","(keywords)",""],["label","Test::Unit::Error","Test/Unit/Error.html#method-i-label","()",""],["label","Test::Unit::Failure","Test/Unit/Failure.html#method-i-label","()",""],["label","Test::Unit::Notification","Test/Unit/Notification.html#method-i-label","()",""],["label","Test::Unit::Omission","Test/Unit/Omission.html#method-i-label","()",""],["label","Test::Unit::Pending","Test/Unit/Pending.html#method-i-label","()",""],["literal","Test::Unit::Assertions::AssertionMessage","Test/Unit/Assertions/AssertionMessage.html#method-c-literal","(value)",""],["load","Test::Unit::Data::ClassMethods::Loader","Test/Unit/Data/ClassMethods/Loader.html#method-i-load","(file_name)","<p>Load data from file.\n<p>@param [String] file_name full path to test data file.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">File</span> <span class=\"ruby-identifier\">format</span> <span class=\"ruby-identifier\">is</span> <span class=\"ruby-identifier\">automatically</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["load_config","Test::Unit::AutoRunner","Test/Unit/AutoRunner.html#method-i-load_config","(file)",""],["load_csv","Test::Unit::Data::ClassMethods::Loader","Test/Unit/Data/ClassMethods/Loader.html#method-i-load_csv","(file_name)","<p>Load data from CSV file.\n<p>There are 2 types of CSV file as following examples. First, there is a header …\n"],["load_data","Test::Unit::Data::ClassMethods","Test/Unit/Data/ClassMethods.html#method-i-load_data","(file_name)","<p>This method provides Data-Driven-Test functionality.\n<p>Load test data from the file. This is shorthand to …\n"],["load_tsv","Test::Unit::Data::ClassMethods::Loader","Test/Unit/Data/ClassMethods/Loader.html#method-i-load_tsv","(file_name)","<p>Load data from TSV file.\n<p>There are 2 types of TSV file as following examples. First, there is a header …\n"],["local_name","Test::Unit::TestCase","Test/Unit/TestCase.html#method-i-local_name","()","<p>Returns a human-readable name for the specific test that this instance of TestCase represents.\n<p>`#local_name` …\n"],["location","Test::Unit::Error","Test/Unit/Error.html#method-i-location","()",""],["long_display","Test::Unit::Error","Test/Unit/Error.html#method-i-long_display","()","<p>Returns a verbose version of the error description.\n"],["long_display","Test::Unit::Failure","Test/Unit/Failure.html#method-i-long_display","()","<p>Returns a verbose version of the error description.\n"],["long_display","Test::Unit::Notification","Test/Unit/Notification.html#method-i-long_display","()","<p>Returns a verbose version of the error description.\n"],["long_display","Test::Unit::Omission","Test/Unit/Omission.html#method-i-long_display","()","<p>Returns a verbose version of the error description.\n"],["long_display","Test::Unit::Pending","Test/Unit/Pending.html#method-i-long_display","()","<p>Returns a verbose version of the error description.\n"],["longest_match","Test::Unit::Diff::SequenceMatcher","Test/Unit/Diff/SequenceMatcher.html#method-i-longest_match","(from_start, from_end, to_start, to_end)",""],["match?","Test::Unit::AttributeMatcher","Test/Unit/AttributeMatcher.html#method-i-match-3F","(expression)",""],["max_diff_target_string_size","Test::Unit::Assertions::AssertionMessage","Test/Unit/Assertions/AssertionMessage.html#method-c-max_diff_target_string_size","()",""],["max_diff_target_string_size=","Test::Unit::Assertions::AssertionMessage","Test/Unit/Assertions/AssertionMessage.html#method-c-max_diff_target_string_size-3D","(size)",""],["maybe_container","Test::Unit::Assertions::AssertionMessage","Test/Unit/Assertions/AssertionMessage.html#method-c-maybe_container","(value, &formatter)",""],["message","Test::Unit::Error","Test/Unit/Error.html#method-i-message","()","<p>Returns the message associated with the error.\n"],["method_added","Test::Unit::Attribute::ClassMethods","Test/Unit/Attribute/ClassMethods.html#method-i-method_added","(name)",""],["method_missing","Test::Unit::Assertions::AssertExceptionHelper::WrappedException","Test/Unit/Assertions/AssertExceptionHelper/WrappedException.html#method-i-method_missing","(name, *args, &block)",""],["method_missing","Test::Unit::AttributeMatcher","Test/Unit/AttributeMatcher.html#method-i-method_missing","(name, *args)",""],["name","Test::Unit::TestCase","Test/Unit/TestCase.html#method-i-name","()","<p>Returns a human-readable name for the specific test that this instance of TestCase represents.\n"],["native_inspect","Test::Unit::Assertions::AssertionMessage::Inspector","Test/Unit/Assertions/AssertionMessage/Inspector.html#method-i-native_inspect","()",""],["need_auto_run=","Test::Unit::AutoRunner","Test/Unit/AutoRunner.html#method-c-need_auto_run-3D","(need)",""],["need_auto_run?","Test::Unit::AutoRunner","Test/Unit/AutoRunner.html#method-c-need_auto_run-3F","()",""],["need_diff?","Test::Unit::UI::Console::ColorizedReadableDiffer","Test/Unit/UI/Console/ColorizedReadableDiffer.html#method-i-need_diff-3F","(options={})",""],["need_fold?","Test::Unit::Diff","Test/Unit/Diff.html#method-i-need_fold-3F","(diff)",""],["need_to_run?","Test::Unit::Priority::Checker","Test/Unit/Priority/Checker.html#method-c-need_to_run-3F","(test)",""],["need_to_run?","Test::Unit::Priority::Checker","Test/Unit/Priority/Checker.html#method-i-need_to_run-3F","()",""],["new","Test::Unit::AssertionFailedError","Test/Unit/AssertionFailedError.html#method-c-new","(message=nil, options=nil)",""],["new","Test::Unit::Assertions::AssertExceptionHelper","Test/Unit/Assertions/AssertExceptionHelper.html#method-c-new","(test_case, expected_exceptions)",""],["new","Test::Unit::Assertions::AssertExceptionHelper::WrappedException","Test/Unit/Assertions/AssertExceptionHelper/WrappedException.html#method-c-new","(exception)",""],["new","Test::Unit::Assertions::AssertionMessage","Test/Unit/Assertions/AssertionMessage.html#method-c-new","(user_message, template_string, parameters)",""],["new","Test::Unit::Assertions::AssertionMessage::ArrayInspector","Test/Unit/Assertions/AssertionMessage/ArrayInspector.html#method-c-new","(array, inspected_objects)",""],["new","Test::Unit::Assertions::AssertionMessage::DelayedLiteral","Test/Unit/Assertions/AssertionMessage/DelayedLiteral.html#method-c-new","(value)",""],["new","Test::Unit::Assertions::AssertionMessage::HashInspector","Test/Unit/Assertions/AssertionMessage/HashInspector.html#method-c-new","(hash, inspected_objects)",""],["new","Test::Unit::Assertions::AssertionMessage::Inspector","Test/Unit/Assertions/AssertionMessage/Inspector.html#method-c-new","(object, inspected_objects={})",""],["new","Test::Unit::Assertions::AssertionMessage::Literal","Test/Unit/Assertions/AssertionMessage/Literal.html#method-c-new","(value)",""],["new","Test::Unit::Assertions::AssertionMessage::MaybeContainer","Test/Unit/Assertions/AssertionMessage/MaybeContainer.html#method-c-new","(value, &formatter)",""],["new","Test::Unit::Assertions::AssertionMessage::NumericInspector","Test/Unit/Assertions/AssertionMessage/NumericInspector.html#method-c-new","(numeric, inspected_objects)",""],["new","Test::Unit::Assertions::AssertionMessage::Template","Test/Unit/Assertions/AssertionMessage/Template.html#method-c-new","(parts)",""],["new","Test::Unit::Assertions::ThrowTagExtractor","Test/Unit/Assertions/ThrowTagExtractor.html#method-c-new","(error)",""],["new","Test::Unit::AttributeMatcher","Test/Unit/AttributeMatcher.html#method-c-new","(test)",""],["new","Test::Unit::AutoRunner","Test/Unit/AutoRunner.html#method-c-new","(standalone)",""],["new","Test::Unit::CodeSnippetFetcher","Test/Unit/CodeSnippetFetcher.html#method-c-new","()",""],["new","Test::Unit::Collector","Test/Unit/Collector.html#method-c-new","()",""],["new","Test::Unit::Collector::Dir","Test/Unit/Collector/Dir.html#method-c-new","(dir=::Dir, file=::File, object_space=::ObjectSpace, req=nil)",""],["new","Test::Unit::Collector::Load","Test/Unit/Collector/Load.html#method-c-new","()",""],["new","Test::Unit::Collector::ObjectSpace","Test/Unit/Collector/ObjectSpace.html#method-c-new","(source=::ObjectSpace)",""],["new","Test::Unit::Collector::XML::Listener","Test/Unit/Collector/XML/Listener.html#method-c-new","()",""],["new","Test::Unit::Color","Test/Unit/Color.html#method-c-new","(name, options={})",""],["new","Test::Unit::ColorScheme","Test/Unit/ColorScheme.html#method-c-new","(scheme_spec)",""],["new","Test::Unit::Data::ClassMethods::Loader","Test/Unit/Data/ClassMethods/Loader.html#method-c-new","(test_case)","<p>@api private\n"],["new","Test::Unit::DataSets","Test/Unit/DataSets.html#method-c-new","()",""],["new","Test::Unit::Diff::Differ","Test/Unit/Diff/Differ.html#method-c-new","(from, to)",""],["new","Test::Unit::Diff::SequenceMatcher","Test/Unit/Diff/SequenceMatcher.html#method-c-new","(from, to, &junk_predicate)",""],["new","Test::Unit::Diff::UTF8Line","Test/Unit/Diff/UTF8Line.html#method-c-new","(line)",""],["new","Test::Unit::Error","Test/Unit/Error.html#method-c-new","(test_name, exception, options={})","<p>Creates a new Error with the given test_name and exception.\n"],["new","Test::Unit::Failure","Test/Unit/Failure.html#method-c-new","(test_name, location, message, options={})","<p>Creates a new Failure with the given location and message.\n"],["new","Test::Unit::FaultLocationDetector","Test/Unit/FaultLocationDetector.html#method-c-new","(fault, code_snippet_fetcher)",""],["new","Test::Unit::Fixture::Fixture","Test/Unit/Fixture/Fixture.html#method-c-new","(test_case)",""],["new","Test::Unit::Fixture::HookPoint","Test/Unit/Fixture/HookPoint.html#method-c-new","(test_case, type, default_options)",""],["new","Test::Unit::MixColor","Test/Unit/MixColor.html#method-c-new","(colors)",""],["new","Test::Unit::Notification","Test/Unit/Notification.html#method-c-new","(test_name, location, message, options={})","<p>Creates a new Notification with the given location and message.\n"],["new","Test::Unit::Omission","Test/Unit/Omission.html#method-c-new","(test_name, location, message, options={})","<p>Creates a new Omission with the given location and message.\n"],["new","Test::Unit::Pending","Test/Unit/Pending.html#method-c-new","(test_name, location, message, options={})","<p>Creates a new Pending with the given location and message.\n"],["new","Test::Unit::Priority::Checker","Test/Unit/Priority/Checker.html#method-c-new","(test)",""],["new","Test::Unit::TestCase","Test/Unit/TestCase.html#method-c-new","(test_method_name)","<p>Creates a new instance of the fixture for running the test represented by test_method_name.\n"],["new","Test::Unit::TestCase::InternalData","Test/Unit/TestCase/InternalData.html#method-c-new","()",""],["new","Test::Unit::TestResult","Test/Unit/TestResult.html#method-c-new","()","<p>Constructs a new, empty TestResult.\n"],["new","Test::Unit::TestSuite","Test/Unit/TestSuite.html#method-c-new","(name=\"Unnamed TestSuite\", test_case=nil)","<p>Creates a new TestSuite with the given name.\n"],["new","Test::Unit::UI::Console::ColorizedReadableDiffer","Test/Unit/UI/Console/ColorizedReadableDiffer.html#method-c-new","(from, to, runner)",""],["new","Test::Unit::UI::Console::TestRunner","Test/Unit/UI/Console/TestRunner.html#method-c-new","(suite, options={})","<p>Creates a new TestRunner for running the passed suite. If quiet_mode is true, the output while running …\n"],["new","Test::Unit::UI::TestRunner","Test/Unit/UI/TestRunner.html#method-c-new","(suite, options={})",""],["new","Test::Unit::UI::TestRunnerMediator","Test/Unit/UI/TestRunnerMediator.html#method-c-new","(suite)","<p>Creates a new TestRunnerMediator initialized to run the passed suite.\n"],["new","Test::Unit::UI::XML::TestRunner","Test/Unit/UI/XML/TestRunner.html#method-c-new","(suite, options={})","<p>Creates a new TestRunner for running the passed suite. :output option specifies where runner output should …\n"],["new","Test::Unit::Util::ProcWrapper","Test/Unit/Util/ProcWrapper.html#method-c-new","(a_proc)","<p>Creates a new wrapper for a_proc.\n"],["notification_count","Test::Unit::TestResultNotificationSupport","Test/Unit/TestResultNotificationSupport.html#method-i-notification_count","()","<p>Returns the number of notifications this TestResult has recorded.\n"],["notify","Test::Unit::TestCaseNotificationSupport","Test/Unit/TestCaseNotificationSupport.html#method-i-notify","(message, options={}, &block)","<p>Notify some information.\n<p>Example:\n\n<pre>def test_notification\n  notify(&quot;I&#39;m here!&quot;)\n  # Reached here\n  notify(&quot;Special!&quot;) ...</pre>\n"],["notify_listeners","Test::Unit::Util::Observable","Test/Unit/Util/Observable.html#method-i-notify_listeners","(channel_name, *arguments)","<p>Calls all the procs registered on the channel indicated by channel_name. If value is specified, it is …\n"],["omission_count","Test::Unit::TestResultOmissionSupport","Test/Unit/TestResultOmissionSupport.html#method-i-omission_count","()","<p>Returns the number of omissions this TestResult has recorded.\n"],["omit","Test::Unit::TestCaseOmissionSupport","Test/Unit/TestCaseOmissionSupport.html#method-i-omit","(message=nil, &block)","<p>Omit the test or part of the test.\n<p>Example:\n\n<pre>def test_omission\n  omit\n  # Not reached here\nend\n\ndef test_omission_with_here ...</pre>\n"],["omit_if","Test::Unit::TestCaseOmissionSupport","Test/Unit/TestCaseOmissionSupport.html#method-i-omit_if","(condition, *args, &block)","<p>Omit the test or part of the test if <em>condition</em> is true.\n<p>Example:\n\n<pre>def test_omission\n  omit_if(&quot;&quot;.empty?) ...</pre>\n"],["omit_unless","Test::Unit::TestCaseOmissionSupport","Test/Unit/TestCaseOmissionSupport.html#method-i-omit_unless","(condition, *args, &block)","<p>Omit the test or part of the test if <em>condition</em> is not true.\n<p>Example:\n\n<pre>def test_omission\n  omit_unless(&quot;string&quot;.empty?) ...</pre>\n"],["operations","Test::Unit::Diff::SequenceMatcher","Test/Unit/Diff/SequenceMatcher.html#method-i-operations","()",""],["options","Test::Unit::AutoRunner","Test/Unit/AutoRunner.html#method-i-options","()",""],["parse_256_color","Test::Unit::Color","Test/Unit/Color.html#method-c-parse_256_color","(string)",""],["pass_percentage","Test::Unit::TestResult","Test/Unit/TestResult.html#method-i-pass_percentage","()",""],["passed?","Test::Unit::TestCase","Test/Unit/TestCase.html#method-i-passed-3F","()","<p>Returns whether this individual test passed or not. Primarily for use in teardown so that artifacts can …\n"],["passed?","Test::Unit::TestCase::InternalData","Test/Unit/TestCase/InternalData.html#method-i-passed-3F","()",""],["passed?","Test::Unit::TestResult","Test/Unit/TestResult.html#method-i-passed-3F","()","<p>Returns whether or not this TestResult represents successful completion.\n"],["passed?","Test::Unit::TestSuite","Test/Unit/TestSuite.html#method-i-passed-3F","()",""],["pend","Test::Unit::TestCasePendingSupport","Test/Unit/TestCasePendingSupport.html#method-i-pend","(message=nil, &block)","<p>Marks the test or part of the test is pending.\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">def</span> <span class=\"ruby-identifier ruby-title\">test_pending</span>\n  <span class=\"ruby-identifier\">pend</span>\n  <span class=\"ruby-comment\"># Not reached here</span>\n<span class=\"ruby-keyword\">end</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["pending_count","Test::Unit::TestResultPendingSupport","Test/Unit/TestResultPendingSupport.html#method-i-pending_count","()","<p>Returns the number of pendings this TestResult has recorded.\n"],["prepare","Test::Unit::AutoRunner","Test/Unit/AutoRunner.html#method-c-prepare","(hook=nil, &block)",""],["prepare","Test::Unit::AutoRunner","Test/Unit/AutoRunner.html#method-i-prepare","()",""],["prepare_for_diff","Test::Unit::Assertions::AssertionMessage","Test/Unit/Assertions/AssertionMessage.html#method-c-prepare_for_diff","(from, to)",""],["pretty_print","Test::Unit::Assertions::AssertionMessage::ArrayInspector","Test/Unit/Assertions/AssertionMessage/ArrayInspector.html#method-i-pretty_print","(q)",""],["pretty_print","Test::Unit::Assertions::AssertionMessage::HashInspector","Test/Unit/Assertions/AssertionMessage/HashInspector.html#method-i-pretty_print","(q)",""],["pretty_print","Test::Unit::Assertions::AssertionMessage::Inspector","Test/Unit/Assertions/AssertionMessage/Inspector.html#method-i-pretty_print","(q)",""],["pretty_print","Test::Unit::Assertions::AssertionMessage::NumericInspector","Test/Unit/Assertions/AssertionMessage/NumericInspector.html#method-i-pretty_print","(q)",""],["pretty_print_cycle","Test::Unit::Assertions::AssertionMessage::ArrayInspector","Test/Unit/Assertions/AssertionMessage/ArrayInspector.html#method-i-pretty_print_cycle","(q)",""],["pretty_print_cycle","Test::Unit::Assertions::AssertionMessage::HashInspector","Test/Unit/Assertions/AssertionMessage/HashInspector.html#method-i-pretty_print_cycle","(q)",""],["pretty_print_cycle","Test::Unit::Assertions::AssertionMessage::Inspector","Test/Unit/Assertions/AssertionMessage/Inspector.html#method-i-pretty_print_cycle","(q)",""],["pretty_print_cycle","Test::Unit::Assertions::AssertionMessage::NumericInspector","Test/Unit/Assertions/AssertionMessage/NumericInspector.html#method-i-pretty_print_cycle","(q)",""],["priority","Test::Unit::Priority::ClassMethods","Test/Unit/Priority/ClassMethods.html#method-i-priority","(name, *tests)",""],["priority_setup","Test::Unit::Priority","Test/Unit/Priority.html#method-i-priority_setup","()",""],["priority_teardown","Test::Unit::Priority","Test/Unit/Priority.html#method-i-priority_teardown","()",""],["problem_occurred","Test::Unit::TestCase","Test/Unit/TestCase.html#method-i-problem_occurred","()","<p>Notify that a problem is occurred in the test. It means that the test is a failed test. If any failed …\n"],["problem_occurred","Test::Unit::TestCase::InternalData","Test/Unit/TestCase/InternalData.html#method-i-problem_occurred","()",""],["process_args","Test::Unit::AutoRunner","Test/Unit/AutoRunner.html#method-i-process_args","(args=ARGV)",""],["ratio","Test::Unit::Diff::SequenceMatcher","Test/Unit/Diff/SequenceMatcher.html#method-i-ratio","()",""],["readable","Test::Unit::Diff","Test/Unit/Diff.html#method-i-readable","(from, to, options={})",""],["realdir","Test::Unit::Collector::Dir","Test/Unit/Collector/Dir.html#method-i-realdir","(path)",""],["recursive_collect","Test::Unit::Collector::Dir","Test/Unit/Collector/Dir.html#method-i-recursive_collect","(name, already_gathered)",""],["refute","Test::Unit::Assertions","Test/Unit/Assertions.html#method-i-refute","(object, message=nil)","<p>Asserts that `object` is false or nil.\n<p>@note Just for minitest compatibility. :&lt;\n<p>@param [Object] object …\n"],["refute_empty","Test::Unit::Assertions","Test/Unit/Assertions.html#method-i-refute_empty","(object, message=nil)","<p>Just for minitest compatibility. :&lt;\n<p>@since 3.0.0\n"],["refute_equal","Test::Unit::Assertions","Test/Unit/Assertions.html#method-i-refute_equal","(expected, actual, message=nil)","<p>Just for minitest compatibility. :&lt;\n<p>@since 2.5.3\n"],["refute_in_delta","Test::Unit::Assertions","Test/Unit/Assertions.html#method-i-refute_in_delta","(expected_float, actual_float, delta=0.001, message=\"\")","<p>Just for minitest compatibility. :&lt;\n<p>@since 2.5.3\n"],["refute_in_epsilon","Test::Unit::Assertions","Test/Unit/Assertions.html#method-i-refute_in_epsilon","(expected_float, actual_float, epsilon=0.001, message=\"\")","<p>Just for minitest compatibility. :&lt;\n<p>@since 3.0.0\n"],["refute_includes","Test::Unit::Assertions","Test/Unit/Assertions.html#method-i-refute_includes","(collection, object, message=nil)","<p>Just for minitest compatibility. :&lt;\n<p>@since 3.0.0\n"],["refute_instance_of","Test::Unit::Assertions","Test/Unit/Assertions.html#method-i-refute_instance_of","(klass, object, message=nil)","<p>Just for minitest compatibility. :&lt;\n<p>@since 3.0.0\n"],["refute_kind_of","Test::Unit::Assertions","Test/Unit/Assertions.html#method-i-refute_kind_of","(klass, object, message=nil)","<p>Just for minitest compatibility. :&lt;\n<p>@since 3.0.0\n"],["refute_match","Test::Unit::Assertions","Test/Unit/Assertions.html#method-i-refute_match","(regexp, string, message=nil)","<p>Just for minitest compatibility. :&lt;\n<p>@since 2.5.3\n"],["refute_nil","Test::Unit::Assertions","Test/Unit/Assertions.html#method-i-refute_nil","(object, message=nil)","<p>Just for minitest compatibility. :&lt;\n<p>@since 2.5.3\n"],["refute_operator","Test::Unit::Assertions","Test/Unit/Assertions.html#method-i-refute_operator","(object1, operator, object2, message=nil)","<p>Just for minitest compatibility. :&lt;\n<p>@since 3.0.0\n"],["refute_predicate","Test::Unit::Assertions","Test/Unit/Assertions.html#method-i-refute_predicate","(object, predicate, message=nil)","<p>Just for minitest compatibility. :&lt;\n<p>@since 3.0.0\n"],["refute_respond_to","Test::Unit::Assertions","Test/Unit/Assertions.html#method-i-refute_respond_to","(object, method, message=nil)","<p>Just for minitest compatibility. :&lt;\n<p>@since 2.5.3\n"],["refute_same","Test::Unit::Assertions","Test/Unit/Assertions.html#method-i-refute_same","(expected, actual, message=nil)","<p>Just for minitest compatibility. :&lt;\n<p>@since 2.5.3\n"],["register","Test::Unit::Fixture::HookPoint","Test/Unit/Fixture/HookPoint.html#method-i-register","(method_name_or_callback, options=nil)",""],["register_attribute_observer","Test::Unit::Attribute::ClassMethods","Test/Unit/Attribute/ClassMethods.html#method-i-register_attribute_observer","(attribute_name, observer=nil, &block)",""],["register_collector","Test::Unit::AutoRunner","Test/Unit/AutoRunner.html#method-c-register_collector","(id, collector_builder=nil, &block)",""],["register_color_scheme","Test::Unit::AutoRunner","Test/Unit/AutoRunner.html#method-c-register_color_scheme","(id, scheme)",""],["register_inspector_class","Test::Unit::Assertions::AssertionMessage::Inspector","Test/Unit/Assertions/AssertionMessage/Inspector.html#method-c-register_inspector_class","(inspector_class)",""],["register_runner","Test::Unit::AutoRunner","Test/Unit/AutoRunner.html#method-c-register_runner","(id, runner_builder=nil, &block)",""],["remove_listener","Test::Unit::Util::Observable","Test/Unit/Util/Observable.html#method-i-remove_listener","(channel_name, listener_key)","<p>Removes the listener indicated by listener_key from the channel indicated by channel_name. Returns the …\n"],["result","Test::Unit::Assertions::AssertionMessage::Template","Test/Unit/Assertions/AssertionMessage/Template.html#method-i-result","(parameters)",""],["run","Test::Unit::AutoRunner","Test/Unit/AutoRunner.html#method-c-run","(force_standalone=false, default_dir=nil, argv=ARGV, &block)",""],["run","Test::Unit::AutoRunner","Test/Unit/AutoRunner.html#method-i-run","()",""],["run","Test::Unit::TestCase","Test/Unit/TestCase.html#method-i-run","(result)","<p>Runs the individual test method represented by this instance of the fixture, collecting statistics, failures …\n"],["run","Test::Unit::TestSuite","Test/Unit/TestSuite.html#method-i-run","(result, &progress_block)","<p>Runs the tests and/or suites contained in this TestSuite.\n"],["run","Test::Unit::UI::TestRunnerMediator","Test/Unit/UI/TestRunnerMediator.html#method-i-run","()","<p>Runs the suite the TestRunnerMediator was created with.\n"],["run","Test::Unit::UI::TestRunnerUtilities","Test/Unit/UI/TestRunnerUtilities.html#method-i-run","(suite, options={})","<p>Creates a new TestRunner and runs the suite.\n"],["run=","Test::Unit","Test/Unit.html#method-c-run-3D","(have_run)","<p>Set true when Test::Unit has run.  If set to true Test::Unit will not automatically run at exit.\n<p>@deprecated …\n"],["run?","Test::Unit","Test/Unit.html#method-c-run-3F","()","<p>Already tests have run?\n<p>@deprecated Use Test::Unit::AutoRunner.need_auto_run? instead.\n"],["run_at_exit_hooks","Test::Unit","Test/Unit.html#method-c-run_at_exit_hooks","()","<p>@api private\n"],["run_at_start_hooks","Test::Unit","Test/Unit.html#method-c-run_at_start_hooks","()","<p>@api private\n"],["run_priority_high?","Test::Unit::Priority::Checker","Test/Unit/Priority/Checker.html#method-c-run_priority_high-3F","(test)",""],["run_priority_important?","Test::Unit::Priority::Checker","Test/Unit/Priority/Checker.html#method-c-run_priority_important-3F","(test)",""],["run_priority_low?","Test::Unit::Priority::Checker","Test/Unit/Priority/Checker.html#method-c-run_priority_low-3F","(test)",""],["run_priority_must?","Test::Unit::Priority::Checker","Test/Unit/Priority/Checker.html#method-c-run_priority_must-3F","(test)",""],["run_priority_never?","Test::Unit::Priority::Checker","Test/Unit/Priority/Checker.html#method-c-run_priority_never-3F","(test)",""],["run_priority_normal?","Test::Unit::Priority::Checker","Test/Unit/Priority/Checker.html#method-c-run_priority_normal-3F","(test)",""],["run_suite","Test::Unit::UI::TestRunnerMediator","Test/Unit/UI/TestRunnerMediator.html#method-i-run_suite","(result=nil)","<p>Just for backward compatibility for NetBeans. NetBeans should not use monkey patching. NetBeans should …\n"],["run_test","Object","Object.html#method-i-run_test","()","<p>experimental. It is for “ruby -rtest-unit -e run_test test/test_*.rb”. Is this API OK or dirty? …\n"],["runner","Test::Unit::AutoRunner","Test/Unit/AutoRunner.html#method-c-runner","(id)",""],["sequence","Test::Unit::Color","Test/Unit/Color.html#method-i-sequence","()",""],["sequence","Test::Unit::MixColor","Test/Unit/MixColor.html#method-i-sequence","()",""],["set_attributes","Test::Unit::Attribute::ClassMethods","Test/Unit/Attribute/ClassMethods.html#method-i-set_attributes","(method_name, new_attributes)",""],["setup","Test::Unit::Fixture::ClassMethods","Test/Unit/Fixture/ClassMethods.html#method-i-setup","(*method_names, &callback)",""],["setup","Test::Unit::Priority::Checker","Test/Unit/Priority/Checker.html#method-i-setup","()",""],["setup","Test::Unit::TestCase","Test/Unit/TestCase.html#method-i-setup","()","<p>Called before every test method runs. Can be used to set up fixture information.\n<p>You can add additional …\n"],["setup_option","Test::Unit::AutoRunner","Test/Unit/AutoRunner.html#method-c-setup_option","(option_builder=nil, &block)",""],["short_display","Test::Unit::Error","Test/Unit/Error.html#method-i-short_display","()","<p>Returns a brief version of the error description.\n"],["short_display","Test::Unit::Failure","Test/Unit/Failure.html#method-i-short_display","()","<p>Returns a brief version of the error description.\n"],["short_display","Test::Unit::Notification","Test/Unit/Notification.html#method-i-short_display","()","<p>Returns a brief version of the error description.\n"],["short_display","Test::Unit::Omission","Test/Unit/Omission.html#method-i-short_display","()","<p>Returns a brief version of the error description.\n"],["short_display","Test::Unit::Pending","Test/Unit/Pending.html#method-i-short_display","()","<p>Returns a brief version of the error description.\n"],["shutdown","Test::Unit::TestCase","Test/Unit/TestCase.html#method-c-shutdown","()","<p>Called after every test case runs. Can be used to tear down fixture information used in test case scope. …\n"],["single_character_display","Test::Unit::Error","Test/Unit/Error.html#method-i-single_character_display","()","<p>Returns a single character representation of an error.\n"],["single_character_display","Test::Unit::Failure","Test/Unit/Failure.html#method-i-single_character_display","()","<p>Returns a single character representation of a failure.\n"],["single_character_display","Test::Unit::Notification","Test/Unit/Notification.html#method-i-single_character_display","()","<p>Returns a single character representation of a notification.\n"],["single_character_display","Test::Unit::Omission","Test/Unit/Omission.html#method-i-single_character_display","()","<p>Returns a single character representation of a omission.\n"],["single_character_display","Test::Unit::Pending","Test/Unit/Pending.html#method-i-single_character_display","()","<p>Returns a single character representation of a pending.\n"],["size","Test::Unit::Diff::UTF8Line","Test/Unit/Diff/UTF8Line.html#method-i-size","()",""],["size","Test::Unit::TestCase","Test/Unit/TestCase.html#method-i-size","()",""],["size","Test::Unit::TestSuite","Test/Unit/TestSuite.html#method-i-size","()","<p>Retuns the rolled up number of tests in this suite; i.e. if the suite contains other suites, it counts …\n"],["sort","Test::Unit::Collector","Test/Unit/Collector.html#method-i-sort","(suites)",""],["source","Test::Unit::CodeSnippetFetcher","Test/Unit/CodeSnippetFetcher.html#method-i-source","(path)",""],["split_backtrace_entry","Test::Unit::FaultLocationDetector","Test/Unit/FaultLocationDetector.html#method-i-split_backtrace_entry","(entry)",""],["standalone?","Test::Unit::AutoRunner","Test/Unit/AutoRunner.html#method-c-standalone-3F","()",""],["start","Test::Unit::UI::TestRunner","Test/Unit/UI/TestRunner.html#method-i-start","()","<p>Begins the test run.\n"],["start_command_line_test","Test::Unit::UI::TestRunnerUtilities","Test/Unit/UI/TestRunnerUtilities.html#method-i-start_command_line_test","()","<p>Takes care of the ARGV parsing and suite determination necessary for running one of the TestRunners from …\n"],["start_time","Test::Unit::TestCase","Test/Unit/TestCase.html#method-i-start_time","()","<p>Returns a Time at the test was started.\n"],["startup","Test::Unit::TestCase","Test/Unit/TestCase.html#method-c-startup","()","<p>Called before every test case runs. Can be used to set up fixture information used in test case scope. …\n"],["status","Test::Unit::TestResult","Test/Unit/TestResult.html#method-i-status","()","<p>Returnes a string that shows result status.\n"],["stop","Test::Unit::TestResult","Test/Unit/TestResult.html#method-i-stop","()",""],["stop_on_failure?","Test::Unit::AutoRunner","Test/Unit/AutoRunner.html#method-i-stop_on_failure-3F","()",""],["stringify","Test::Unit::Attribute::StringifyKeyHash","Test/Unit/Attribute/StringifyKeyHash.html#method-c-stringify","(object)",""],["sub_test_case","Test::Unit::TestCase","Test/Unit/TestCase.html#method-c-sub_test_case","(name, &block)","<p>Defines a sub test case.\n<p>This is a syntax sugar. The both of the following codes are the same in meaning: …\n"],["suite","Test::Unit::TestCase","Test/Unit/TestCase.html#method-c-suite","()","<p>Rolls up all of the test* methods in the fixture into one suite, creating a new instance of the fixture …\n"],["summary","Test::Unit::TestResult","Test/Unit/TestResult.html#method-i-summary","()","<p>Returns a string contain the recorded runs, assertions, failures and errors in this TestResult.\n"],["tag_end","Test::Unit::Collector::XML::Listener","Test/Unit/Collector/XML/Listener.html#method-i-tag_end","(name)",""],["tag_start","Test::Unit::Collector::XML::Listener","Test/Unit/Collector/XML/Listener.html#method-i-tag_start","(name, attributes)",""],["target?","Test::Unit::Assertions::AssertionMessage::ArrayInspector","Test/Unit/Assertions/AssertionMessage/ArrayInspector.html#method-c-target-3F","(object)",""],["target?","Test::Unit::Assertions::AssertionMessage::HashInspector","Test/Unit/Assertions/AssertionMessage/HashInspector.html#method-c-target-3F","(object)",""],["target?","Test::Unit::Assertions::AssertionMessage::NumericInspector","Test/Unit/Assertions/AssertionMessage/NumericInspector.html#method-c-target-3F","(object)",""],["target?","Test::Unit::FaultLocationDetector","Test/Unit/FaultLocationDetector.html#method-i-target-3F","(backtrace_entry)",""],["teardown","Test::Unit::Fixture::ClassMethods","Test/Unit/Fixture/ClassMethods.html#method-i-teardown","(*method_names, &callback)",""],["teardown","Test::Unit::Priority::Checker","Test/Unit/Priority/Checker.html#method-i-teardown","()",""],["teardown","Test::Unit::TestCase","Test/Unit/TestCase.html#method-i-teardown","()","<p>Called after every test method runs. Can be used to tear down fixture information.\n<p>You can add additional …\n"],["template","Test::Unit::Assertions::AssertionMessage","Test/Unit/Assertions/AssertionMessage.html#method-i-template","()",""],["test","Test::Unit::TestCase","Test/Unit/TestCase.html#method-c-test","(*test_description_or_targets, &block)","<p>Defines a test in declarative syntax or marks following method as a test method.\n<p>In declarative syntax …\n"],["test_defined?","Test::Unit::TestCase","Test/Unit/TestCase.html#method-c-test_defined-3F","(query)","<p>Checks whether a test that is matched the query is defined.\n<p>@option query [String] :path (nil)\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">the</span> <span class=\"ruby-identifier\">path</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["test_finished","Test::Unit::TestCase::InternalData","Test/Unit/TestCase/InternalData.html#method-i-test_finished","()",""],["test_order","Test::Unit::TestCase","Test/Unit/TestCase.html#method-c-test_order","()","<p>Returns the current test order. This returns `:alphabetic` by default.\n"],["test_order=","Test::Unit::TestCase","Test/Unit/TestCase.html#method-c-test_order-3D","(order)","<p>Sets the current test order.\n<p>Here are the available <em>order</em>:\n<p>:alphabetic : Default. Tests are sorted in alphabetic …\n"],["test_started","Test::Unit::TestCase::InternalData","Test/Unit/TestCase/InternalData.html#method-i-test_started","()",""],["text","Test::Unit::Collector::XML::Listener","Test/Unit/Collector/XML/Listener.html#method-i-text","(data)",""],["to_hash","Test::Unit::ColorScheme","Test/Unit/ColorScheme.html#method-i-to_hash","()",""],["to_proc","Test::Unit::Util::ProcWrapper","Test/Unit/Util/ProcWrapper.html#method-i-to_proc","()",""],["to_s","Test::Unit::Assertions::AssertionMessage","Test/Unit/Assertions/AssertionMessage.html#method-i-to_s","()",""],["to_s","Test::Unit::Diff::UTF8Line","Test/Unit/Diff/UTF8Line.html#method-i-to_s","()",""],["to_s","Test::Unit::Error","Test/Unit/Error.html#method-i-to_s","()","<p>Overridden to return long_display.\n"],["to_s","Test::Unit::Failure","Test/Unit/Failure.html#method-i-to_s","()","<p>Overridden to return long_display.\n"],["to_s","Test::Unit::Notification","Test/Unit/Notification.html#method-i-to_s","()","<p>Overridden to return long_display.\n"],["to_s","Test::Unit::Omission","Test/Unit/Omission.html#method-i-to_s","()","<p>Overridden to return long_display.\n"],["to_s","Test::Unit::Pending","Test/Unit/Pending.html#method-i-to_s","()","<p>Overridden to return long_display.\n"],["to_s","Test::Unit::TestCase","Test/Unit/TestCase.html#method-i-to_s","()","<p>Overridden to return #name.\n"],["to_s","Test::Unit::TestResult","Test/Unit/TestResult.html#method-i-to_s","()",""],["to_s","Test::Unit::TestSuite","Test/Unit/TestSuite.html#method-i-to_s","()","<p>Overridden to return the name given the suite at creation.\n"],["underline?","Test::Unit::Color","Test/Unit/Color.html#method-i-underline-3F","()",""],["unified","Test::Unit::Diff","Test/Unit/Diff.html#method-i-unified","(from, to, options={})",""],["unregister","Test::Unit::Fixture::HookPoint","Test/Unit/Fixture/HookPoint.html#method-i-unregister","(method_name_or_callback)",""],["unregister_cleanup","Test::Unit::Fixture::ClassMethods","Test/Unit/Fixture/ClassMethods.html#method-i-unregister_cleanup","(*method_names_or_callbacks)",""],["unregister_exception_handler","Test::Unit::ExceptionHandler::ClassMethods","Test/Unit/ExceptionHandler/ClassMethods.html#method-i-unregister_exception_handler","(*method_name_or_handlers)",""],["unregister_inspector_class","Test::Unit::Assertions::AssertionMessage::Inspector","Test/Unit/Assertions/AssertionMessage/Inspector.html#method-c-unregister_inspector_class","(inspector_class)",""],["unregister_setup","Test::Unit::Fixture::ClassMethods","Test/Unit/Fixture/ClassMethods.html#method-i-unregister_setup","(*method_names_or_callbacks)",""],["unregister_teardown","Test::Unit::Fixture::ClassMethods","Test/Unit/Fixture/ClassMethods.html#method-i-unregister_teardown","(*method_names_or_callbacks)",""],["use_pp=","Test::Unit::Assertions","Test/Unit/Assertions.html#method-c-use_pp-3D","(value)","<p>Select whether or not to use the pretty-printer. If this option is set to false before any assertions …\n"],["user_message","Test::Unit::Assertions::AssertionMessage","Test/Unit/Assertions/AssertionMessage.html#method-i-user_message","()",""],["wide_character?","Test::Unit::Diff::UTF8Line","Test/Unit/Diff/UTF8Line.html#method-c-wide_character-3F","(character)",""]]}}