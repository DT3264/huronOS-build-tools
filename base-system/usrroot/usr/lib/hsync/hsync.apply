#!/bin/bash

set -xe

## Load log function
. /usr/sbin/hsync.logger

TO_APPLY="Always"

set_global_config () {
	local GLOBAL KEYBOARDS XKB XKBS IDX LAYOUT
	
	## Get the [Global] config
	GLOBAL=$(sed -nE '/^\[Global\]$/{:l n;/^(\[.*\])?$/q;p;bl}' $CONFIG_FILE)
	log "Reading [Global] config -> \n$GLOBAL"

	## Declare Global settings variables
	local TimeZone ConfigExpirationTime AvailableKeyboardLayouts DefaultKeyboardLayout EventConfig ContestConfig
	for CONFIG in $GLOBAL; do
		declare $CONFIG
	done

	## Timezone
	timedatectl set-timezone $TimeZone
	log "Setting timezone to $TimeZone"

	## Update available keyboards
	KEYBOARDS=$(echo $AvailableKeyboardLayouts | sed 's/;/ /g')
	XKB=""
	for LAYOUT in $KEYBOARDS; do
		XKB+=" ('xkb', '$LAYOUT')"
	done
	XKBS="[$(echo $XKB | sed 's/) (/), (/g')]"
	su contestant -c "gsettings set org.gnome.desktop.input-sources sources \"$XKBS\""
	log "Setting available keyboards to -> $KEYBOARDS"

	## Update current (default) keyboard layout
	IDX=0
	for LAYOUT in $KEYBOARDS; do
		if [ "$LAYOUT" = "$DefaultKeyboardLayout" ]; then
			break
		fi
		let "IDX+=1"
	done;
	su contestant -c "gsettings set org.gnome.desktop.input-sources current $IDX"
	log "Setting current keyboard to -> $DefaultKeyboardLayout"
}

get_specific_config(){
	## Get the EventConfig and ContestConfig
	declare $(sed -nE '/^\[Global\]$/{:l n;/^(\[.*\])?$/q;p;bl}' $CONFIG_FILE | grep EventConfig)
	declare $(sed -nE '/^\[Global\]$/{:l n;/^(\[.*\])?$/q;p;bl}' $CONFIG_FILE | grep ContestConfig)
	
	### Decide if apply [Always], [Event] or [Contest]
	NOW=$(date +'%s')

	### Check if event is configured, if so check if event is running
	if [ "$EventConfig" = "true" ]; then
		## Load event times
		EVENT_TIMES=$(sed -nE "/^\[Event-Times\]$/{:l n;/^(\[.*\])?$/q;p;bl}" $CONFIG_FILE)
		log "Reading [Event-Times] config -> \n$EVENT_TIMES"

		## Check if we are in a event
		while read START END; do
			if [ $NOW -ge $(date --date "$START" +'%s') ] && [ $NOW -le $(date --date "$END" +'%s') ]; then
				TO_APPLY="Event"
			fi
		done < <(echo $EVENT_TIMES | xargs -n 2)
	fi

	### Check if event is configured, if so check if event is running
	if [ "$ContestConfig" = "true" ]; then
		## Load contest times
		CONTEST_TIMES=$(sed -nE "/^\[Contest-Times\]$/{:l n;/^(\[.*\])?$/q;p;bl}" $CONFIG_FILE)
		log "Reading [Contest-Times] config -> \n$CONTEST_TIMES"

		## Check if we are in a event
		while read START END; do
				if [ $NOW -ge $(date --date "$START" +'%s') ] && [ $NOW -le $(date --date "$END" +'%s') ]; then
						TO_APPLY="Contest"
				fi
		done < <(echo $CONTEST_TIMES | xargs -n 2)
	fi
}

set_specific_config(){
	SECTION=$1
	
	## Get the [Specific] config
	SPECIFIC=$(sed -nE "/^\[$SECTION\]$/{:l n;/^(\[.*\])?$/q;p;bl}" $CONFIG_FILE)
	log "Reading [SPECIFIC] config -> \n$SPECIFIC"

	## Declare Specific settings variables
	local Wallpaper AllowList AvailableSoftware
	for CONFIG in $SPECIFIC; do
		declare $CONFIG
	done
	
	## Wallpaper
	if [ "$Wallpaper" = "default" ]; then
		log "Setting default wallpaper"
		su contestant -c "gsettings set org.gnome.desktop.background picture-uri file:///usr/share/backgrounds/huronos-background.png"
	else
		log "Downloading wallpaper $Wallpaper"
		NAME=$(basename $Wallpaper)
		FILE="/usr/share/backgrounds/custom-background-$$-$NAME"
		rm -f /usr/share/backgrounds/custom-background-*
		wget --timeout=10 $Wallpaper -O $FILE
		chmod 777 $FILE
		if [ $? -ne 0 ]; then
			log "Wallpaper cannot be downloaded, Wrong URL?"
		else
			log "Setting the wallpaper"
			su contestant -c "gsettings set org.gnome.desktop.background picture-uri file://$FILE"
		fi
	fi
	
	## Network Filtering
	if [ "$AllowList" = "all" ]; then
		## Do not filter anything (allow all)
		#TODO: Update network filter module
		log "Network filter set to: Allow all"
	elif [ "$AllowList" = "any" ]; then
		## Any kind of connection is not permited (deny all)
		#TODO: Update network filter module
		log "Network filter set to: Deny all"
	else
		## Deny all connections except this exceptions
		WEBSITES=$(echo $AllowList | sed 's/;/ /g')
		IPv4=""
		IPv6=""
		for WEB in $WEBSITES; do
			IPv4+=" $(dig +short $WEB A)"
			IPv6+=" $(dig +short $WEB AAAA)"
		done
		log "Network filter set to: Deny all except -> \nIPv4: $IPv4\nIPv6: $IPv6"
		#TODO: Update network filter module
	fi
	
	## Available Software
	SOFTWARE=$(echo $AvailableSoftware | sed 's/;/ /g')
	cp -f /etc/hmm/any /etc/hmm/current
	for SFW in $SOFTWARE; do
		sed "s%$SFW.*%$SFW\t\t\ttrue%g" -i /etc/hmm/current
	done
	log "Activating software -> $SOFTWARE"
	hmm block-update /etc/hmm/current | sed -r "s/\x1B\[(([0-9]{1,2})?(;)?([0-9]{1,2})?)?[m,K,H,f,J]//g" | tee -a /var/log/hsync.log
}

aufs_move_current_partition(){
	#TODO: Partition change
	log "Changing AUFS partition"
}

log "--------------------------------------------- Starting huronOS configuration"

## Load argument as the config file path
CONFIG_FILE=$1
get_specific_config

### [Move persistence]
aufs_move_current_partition

### [Global]
log "Setting global configuration"
set_global_config 

## Apply specific configuration
log "Applying [$TO_APPLY] configuration"
set_specific_config $TO_APPLY

log "--------------------------------------------- Ended huronOS configuration"

exit 0
