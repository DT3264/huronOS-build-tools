#!/bin/bash

set -xe

## Load log function
. /usr/lib/hsync/hsync.logger

### Decide if apply [Always], [Event] or [Contest], and if directives file has expired
NOW=$(date +'%s')

TO_APPLY="Always"
NEXT_APPLY=""

update_next_apply () {
	interesting_time=$(date --date "$1" +'%s')
	## Check if interesting_time happens after now and earlier than previous NEXT_APPLY
	if [ $NOW -lt $interesting_time ]; then
		if [ ! $NEXT_APPLY ]; then
			NEXT_APPLY=$interesting_time
		elif [ $NEXT_APPLY -gt $interesting_time ]; then
			NEXT_APPLY=$interesting_time
		fi
	fi
}

# Function taken from https://unix.stackexchange.com/questions/571772/how-to-ensure-all-processes-are-killed-before-unmounting-a-filesystem
# $1 = mount point
force_umount() {
	mkdir -p /sys/fs/cgroup/freezer/prepareumount
	echo FROZEN > /sys/fs/cgroup/freezer/prepareumount/freezer.state

	for i in $(seq 1 10); do
		for p in $(fuser -m $1 2>/dev/null); do
			echo $p > /sys/fs/cgroup/freezer/prepareumount/cgroup.procs
			for t in $(ps -L -o tid= -p $p); do
				echo $t > /sys/fs/cgroup/freezer/prepareumount/tasks
			done
		done
	done

	#give time to an overloaded kernel to freeze everything (FREEZING->FROZEN)
	while ! cat /sys/fs/cgroup/freezer/prepareumount/freezer.state | grep -q FROZEN; do
		sleep 0.1
	done

	# kills, delayed
	for i in $(cat /sys/fs/cgroup/freezer/prepareumount/cgroup.procs); do
		kill -KILL $i
	done

	# actual kills happen now, at once
	echo THAWED > /sys/fs/cgroup/freezer/prepareumount/freezer.state

	sleep 1
	umount $1
}

set_global_config () {
	local GLOBAL KEYBOARDS XKB XKBS IDX LAYOUT
	
	## Get the [Global] config
	GLOBAL=$(sed -nE '/^\[Global\]$/{:l n;/^(\[.*\])?$/q;p;bl}' $CONFIG_FILE)
	log "Reading [Global] config -> \n$GLOBAL"

	## Declare Global settings variables
	local TimeZone ConfigExpirationTime AvailableKeyboardLayouts DefaultKeyboardLayout EventConfig ContestConfig
	for CONFIG in $GLOBAL; do
		declare $CONFIG
	done

	## Timezone
	timedatectl set-timezone $TimeZone
	log "Setting timezone to $TimeZone"
	
	## Expiration time
	if [ "$ConfigExpirationTime" != "never" ]; then
		if [ $NOW -ge $(date --date "$ConfigExpirationTime" +'%s') ]; then
			## Apply default directives
			cp /etc/hsync/default $CONFIG_FILE
			echo "$0 $CONFIG_FILE" | at now
			exit 0
		else
			update_next_apply $ConfigExpirationTime
		fi
	fi

	## Update available keyboards
	KEYBOARDS=$(echo $AvailableKeyboardLayouts | sed 's/|/ /g')
	XKB=""
	for LAYOUT in $KEYBOARDS; do
		XKB+=" ('xkb', '$LAYOUT')"
	done
	XKBS="[$(echo $XKB | sed 's/) (/), (/g')]"
	su contestant -c "gsettings set org.gnome.desktop.input-sources sources \"$XKBS\""
	log "Setting available keyboards to -> $KEYBOARDS"

	## Update current (default) keyboard layout
	if [ "$TO_APPLY" != "Contest" ]; then
		# Update only if current mode is not contest
		IDX=0
		for LAYOUT in $KEYBOARDS; do
			if [ "$LAYOUT" = "$DefaultKeyboardLayout" ]; then
				break
			fi
			let "IDX+=1"
		done;
		su contestant -c "gsettings set org.gnome.desktop.input-sources current $IDX"
		log "Setting current keyboard to -> $DefaultKeyboardLayout"
	else
		log "Skipping current keyboard layout update"
	fi
}

get_specific_config(){
	## Get the TimeZone, EventConfig and ContestConfig
	declare $(sed -nE '/^\[Global\]$/{:l n;/^(\[.*\])?$/q;p;bl}' $CONFIG_FILE | grep TimeZone)
	declare $(sed -nE '/^\[Global\]$/{:l n;/^(\[.*\])?$/q;p;bl}' $CONFIG_FILE | grep EventConfig)
	declare $(sed -nE '/^\[Global\]$/{:l n;/^(\[.*\])?$/q;p;bl}' $CONFIG_FILE | grep ContestConfig)

	### Check if event is configured, if so check if event is running
	if [ "$EventConfig" = "true" ]; then
		## Load event times
		EVENT_TIMES=$(sed -nE "/^\[Event-Times\]$/{:l n;/^(\[.*\])?$/q;p;bl}" $CONFIG_FILE)
		log "Reading [Event-Times] config -> \n$EVENT_TIMES"

		## Check if we are in a event
		while read START END; do
			if [ $NOW -ge $(date --date='TZ="'"$TimeZone"'" '"$START"'' +'%s') ] && [ $NOW -lt $(date --date='TZ="'"$TimeZone"'" '"$END"'' +'%s') ]; then
				TO_APPLY="Event"
			fi
			
			## Check if we need to apply directives file in the future
			update_next_apply $START
			update_next_apply $END
		done < <(echo $EVENT_TIMES | xargs -n 2)
	fi

	### Check if event is configured, if so check if event is running
	if [ "$ContestConfig" = "true" ]; then
		## Load contest times
		CONTEST_TIMES=$(sed -nE "/^\[Contest-Times\]$/{:l n;/^(\[.*\])?$/q;p;bl}" $CONFIG_FILE)
		log "Reading [Contest-Times] config -> \n$CONTEST_TIMES"

		## Check if we are in a event
		while read START END; do
			if [ $NOW -ge $(date --date='TZ="'"$TimeZone"'" '"$START"'' +'%s') ] && [ $NOW -lt $(date --date='TZ="'"$TimeZone"'" '"$END"'' +'%s') ]; then
					TO_APPLY="Contest"
			fi
			
			## Check if we need to apply directives file in the future
			update_next_apply $START
			update_next_apply $END
		done < <(echo $CONTEST_TIMES | xargs -n 2)
	fi
}

set_specific_config(){
	SECTION=$1
	
	## Get the [Specific] config
	SPECIFIC=$(sed -nE "/^\[$SECTION\]$/{:l n;/^(\[.*\])?$/q;p;bl}" $CONFIG_FILE)
	log "Reading [SPECIFIC] config -> \n$SPECIFIC"

	## Declare Specific settings variables
	local Wallpaper AllowList AvailableSoftware
	for CONFIG in $SPECIFIC; do
		declare $CONFIG
	done
	
	## Wallpaper
	if [ "$Wallpaper" = "default" ]; then
		log "Setting default wallpaper"
		su contestant -c "gsettings set org.gnome.desktop.background picture-uri file:///usr/share/backgrounds/huronos-background.png"
	else
		log "Downloading wallpaper $Wallpaper"
		NAME=$(basename $Wallpaper)
		FILE="/usr/share/backgrounds/custom-background-$$-$NAME"
		rm -f /usr/share/backgrounds/custom-background-*
		wget --timeout=10 $Wallpaper -O $FILE
		chmod 777 $FILE
		if [ $? -ne 0 ]; then
			log "Wallpaper cannot be downloaded, Wrong URL?"
		else
			log "Setting the wallpaper"
			su contestant -c "gsettings set org.gnome.desktop.background picture-uri file://$FILE"
		fi
	fi

	## USB storage config with hmount
	if [ "$AllowUsbStorage" = "true" ]; then
		sed "s/ShouldMount=.*/ShouldMount=true/g" -i /etc/hmount/rule
		chmod 640 /etc/hmount/rule
	else
		## Change the rule
		sed "s/ShouldMount=.*/ShouldMount=false/g" -i /etc/hmount/rule
		chmod 640 /etc/hmount/rule

		## For each device mounted, kill all processes that are using the mount point, then umount
		MOUNT_POINTS=$(cat /proc/mounts | grep -E '/dev/sd([c-z]|[a-z][a-z])[1-9][0-9]*' | awk '{ print $2 }')
		for MNT in $MOUNT_POINTS; do
			#force_umount $MNT
			if [ fuser -k -m "$MNT" || true ]; then
				umount --lazy "$MNT"
				rm -rf "$MNT"
				sed "s%.*$MNT.*%%g" -i /etc/fstab
				systemctl disable "media-$(basename $MNT).mount"
				rm -rf "/etc/systemd/system/media-$(basename $MNT).mount"
			fi
		done
	fi

	
	## Network Filtering
	if [ "$AllowList" = "all" ]; then
		## Do not filter anything (allow all)
		#TODO: Update network filter module
		log "Network filter set to: Allow all"
	elif [ "$AllowList" = "any" ]; then
		## Any kind of connection is not permited (deny all)
		#TODO: Update network filter module
		log "Network filter set to: Deny all"
	else
		## Deny all connections except this exceptions
		WEBSITES=$(echo $AllowList | sed 's/|/ /g')
		IPv4=""
		IPv6=""
		for WEB in $WEBSITES; do
			IPv4+=" $(dig +short $WEB A)"
			IPv6+=" $(dig +short $WEB AAAA)"
		done
		log "Network filter set to: Deny all except -> \nIPv4: $IPv4\nIPv6: $IPv6"
		#TODO: Update network filter module
	fi
	
	## Bookmarks for Internet Browsers
	BOOKMARKS=$(echo $Bookmarks | sed 's/[{}^|]/ /g')
	BOOKMARKS_LINES=""
	echo $BOOKMARKS
	while read NAME URL; do
		BOOKMARKS_LINES="$BOOKMARKS_LINES\n        <DT><A HREF=\"$URL\">$NAME</A>"
	done < <(echo $BOOKMARKS | xargs -n 2)
	log "Setting bookmarks:\n$BOOKMARKS_LINES"
	
	# Firefox bookmarks
	TMP_FILE="/tmp/firefox-bookmarks-$$.html"
	cp /etc/hsync/bookmarks/templates/firefox.html $TMP_FILE
	sed -i "s|<!-- Bookmarks Lines -->|$BOOKMARKS_LINES|g" $TMP_FILE
	log "Updating firefox bookmarks in /usr/lib/firefox-esr/bookmarks.html"
	mkdir -p /usr/lib/firefox-esr
	cp $TMP_FILE /usr/lib/firefox-esr/bookmarks.html
	rm -rf $TMP_FILE
	
	# Chromium bookmarks
	TMP_FILE="/tmp/chromium-bookmarks-$$.html"
	cp /etc/hsync/bookmarks/templates/chromium.html $TMP_FILE
	sed -i "s|<!-- Bookmarks Lines -->|$BOOKMARKS_LINES|g" $TMP_FILE
	log "Updating chromium bookmarks in /usr/share/chromium/initial_bookmarks.html"
	mkdir -p /usr/share/chromium
	cp $TMP_FILE /usr/share/chromium/initial_bookmarks.html
	rm -rf $TMP_FILE
	
	## Available Software
	SOFTWARE=$(echo $AvailableSoftware | sed 's/|/ /g')
	cp -f /etc/hmm/any /etc/hmm/current
	for SFW in $SOFTWARE; do
		sed "s%$SFW.*%$SFW\t\t\ttrue%g" -i /etc/hmm/current
	done
	log "Activating software -> $SOFTWARE"
	hmm -u --block-update /etc/hmm/current | sed -r "s/\x1B\[(([0-9]{1,2})?(;)?([0-9]{1,2})?)?[m,K,H,f,J]//g" | tee -a /var/log/hsync.log
	chown -R contestant:contestant /home/contestant/.config/JetBrains
}

aufs_move_current_partition(){
	#TODO: Partition change
	log "Changing AUFS partition"
}

log "--------------------------------------------- Starting huronOS configuration"

## Load argument as the config file path
CONFIG_FILE=$1
get_specific_config

### [Move persistence]
aufs_move_current_partition

### [Global]
log "Setting global configuration"
set_global_config 

## Apply specific configuration
log "Applying [$TO_APPLY] configuration"
set_specific_config $TO_APPLY

## Remove previous apply jobs
for i in $(atq | cut -f 1); do 
	atrm $i; 
done

### Schedule next apply job
if [ $NEXT_APPLY ]; then
	formated_next_time=$(date -d @$NEXT_APPLY +"%Y%m%d%H%M.%S");
	log "Scheduling next apply job at $formated_next_time"
	echo "$0 $CONFIG_FILE" | at -t $formated_next_time
fi

log "--------------------------------------------- Ended huronOS configuration"

exit 0
